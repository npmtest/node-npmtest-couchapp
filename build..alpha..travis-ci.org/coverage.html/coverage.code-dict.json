{"/home/travis/build/npmtest/node-npmtest-couchapp/test.js":"/* istanbul instrument in package npmtest_couchapp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-couchapp/lib.npmtest_couchapp.js":"/* istanbul instrument in package npmtest_couchapp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_couchapp = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_couchapp = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-couchapp/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-couchapp && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_couchapp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_couchapp\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_couchapp.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_couchapp.rollup.js'] =\n            local.assetsDict['/assets.npmtest_couchapp.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_couchapp.__dirname + '/lib.npmtest_couchapp.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-couchapp/node_modules/couchapp/main.js":"var path = require('path')\n  , fs = require('fs')\n  , watch = require('watch')\n  , request = require('request')\n  , crypto = require('crypto')\n  , mimetypes = require('./mimetypes')\n  , spawn = require('child_process').spawn\n  ;\n\nvar h = {'content-type':'application/json', 'accept-type':'application/json'}\n  \n/**\n * Recursively load directory contents into ddoc\n *\n * It's really convenient to see the main couchapp code in single file,\n * rather than mapped into little files in lots of directories like\n * the python couchapp. But there are definitely cases where we might want \n * to use some module or another on the server side. This addition\n * loads file contents from a given directory (recursively) into a js \n * object that can be added to a design document and require()'d in \n * lists, shows, etc. \n *\n * Use couchapp.loadFiles() in app.js like this:\n *\n *    ddoc = {\n *        _id: '_design/app'\n *      , views: {}\n *      , ...\n *      , lib: couchapp.loadFiles('./lib')\n *      , vendor: couchapp.loadFiles('./vendor')\n *    }\n *\n * Optionally, pass in operators to process file contents. For example, \n * generate mustache templates from jade templates.\n *\n * In yourapp/templates/index.jade\n *  \n * !!!5\n * html\n *   head\n *     //- jade locals.title\n *     title!= title\n *   body\n *     .item\n *       //- mustache variable for server-side rendering\n *       h1 {{ heading }}\n *\n * in yourapp/app.js\n * var couchapp = require('couchapp')\n *   , jade = require('jade')\n *   , options = {\n *       , operators: [\n *           function renderJade (content, options) {\n *             var compiler = jade.compile(content);\n *             return compiler(options.locals || {});\n *           }\n *         ]\n *       , locals: { title: 'Now we\\'re cookin with gas!' }\n *   };\n *\n * ddoc = { ... };\n * \n * ddoc.templates = loadFiles(dir, options);\n */\n\nfunction loadFiles(dir, options) {\n  var listings = fs.readdirSync(dir)\n    , options = options || {}\n    , obj = {};\n\n  listings.forEach(function (listing) {\n    var file = path.join(dir, listing)\n      , prop = listing.split('.')[0] // probably want regexp or something more robust\n      , stat = fs.statSync(file);\n\n      if (stat.isFile()) { \n        var content = fs.readFileSync(file).toString();\n        if (options.operators) {\n          options.operators.forEach(function (op) {\n            content = op(content, options);\n          });\n        }\n        obj[prop] = content;\n      } else if (stat.isDirectory()) {\n        obj[listing] = loadFiles(file, options);\n      }\n  });\n\n  return obj;\n}\n\n/**\n * End of patch (also see exports and end of file)\n */\n\nfunction loadAttachments (doc, root, prefix) {\n  doc.__attachments = doc.__attachments || []\n  try {\n    fs.statSync(root)\n  } catch(e) {\n    throw e\n    throw new Error(\"Cannot stat file \"+root)\n  }\n  doc.__attachments.push({root:root, prefix:prefix});\n}\n\nfunction copy (obj) {\n  var n = {}\n  for (i in obj) n[i] = obj[i];\n  return n\n}\n\n  \nfunction createApp (doc, url, cb) {\n  var app = {doc:doc}\n  \n  app.fds = {};\n  \n  app.prepare = function () {\n    var p = function (x) {\n      for (i in x) {\n        if (i[0] != '_') {\n          if (typeof x[i] == 'function') {\n            x[i] = x[i].toString()\n            x[i] = 'function '+x[i].slice(x[i].indexOf('('))\n          }\n          if (typeof x[i] == 'object') {\n            p(x[i])\n          }\n        }\n      }\n    }\n    p(app.doc);\n    app.doc.__attachments = app.doc.__attachments || []\n    app.doc.attachments_md5 = app.doc.attachments_md5 || {}\n    app.doc._attachments = app.doc._attachments || {}\n  }\n  \n  var push = function (callback) {\n    console.log('Serializing.')\n    var doc = copy(app.doc);\n    doc._attachments = copy(app.doc._attachments)\n    delete doc.__attachments;\n    var body = JSON.stringify(doc)\n    console.log('PUT '+url.replace(/^(https?:\\/\\/[^@:]+):[^@]+@/, '$1:******@'))\n    request({uri:url, method:'PUT', body:body, headers:h}, function (err, resp, body) {\n      if (err) throw err;\n      if (resp.statusCode !== 201) {\n        throw new Error(\"Could not push document\\nCode: \" + resp.statusCode + \"\\n\"+body);\n      }\n      app.doc._rev = JSON.parse(body).rev\n      console.log('Finished push. '+app.doc._rev)\n      request({uri:url, headers:h}, function (err, resp, body) {\n        body = JSON.parse(body);\n        app.doc._attachments = body._attachments;\n        if (callback) callback()\n      })\n    })\n  }\n  \n  app.push = function (callback) {\n    var revpos\n      , pending_dirs = 0\n      ;\n    \n    console.log('Preparing.')\n    var doc = app.current;\n    for (i in app.doc) {\n      if (i !== '_rev') doc[i] = app.doc[i]\n    }\n    app.doc = doc;\n    app.prepare();\n    revpos = app.doc._rev ? parseInt(app.doc._rev.slice(0,app.doc._rev.indexOf('-'))) : 0;\n    \n    var coffeeCompile;\n    var coffeeExt;\n    try{\n      coffeeCompile = require('coffee-script');\n      coffeeExt = /\\.(lit)?coffee$/;\n    } catch(e){}\n\n    app.doc.__attachments.forEach(function (att) {\n      watch.walk(att.root, {ignoreDotFiles:true}, function (err, files) {\n        pending_dirs += 1;\n        var pending_files = Object.keys(files).length;\n        for (i in files) { (function (f) {\n          fs.readFile(f, function (err, data) {\n            if(f.match(coffeeExt)){\n              data = new Buffer( coffeeCompile.compile(data.toString()) );\n              f = f.replace(coffeeExt,'.js');\n            }\n            f = f.replace(att.root, att.prefix || '').replace(/\\\\/g,\"/\");\n            if (f[0] == '/') f = f.slice(1)\n            if (!err) {\n              var d = data.toString('base64')\n                , md5 = crypto.createHash('md5')\n                , mime = mimetypes.lookup(path.extname(f).slice(1))\n                ;\n              md5.update(d)\n              md5 = md5.digest('hex')\n              if (app.doc.attachments_md5[f] && app.doc._attachments[f]) {\n                if (app.doc._attachments[f].revpos === app.doc.attachments_md5[f].revpos &&\n                    app.doc.attachments_md5[f].md5 === md5) {\n                  pending_files -= 1;\n                  if(pending_files === 0){\n                    pending_dirs -= 1;\n                    if(pending_dirs === 0){\n                      push(callback);\n                    }\n                  }\n                  return; // Does not need to be updated.\n                }\n              }\n              app.doc._attachments[f] = {data:d, content_type:mime};\n              app.doc.attachments_md5[f] = {revpos:revpos + 1, md5:md5};\n            }\n            pending_files -= 1\n            if(pending_files === 0){\n              pending_dirs -= 1;\n              if(pending_dirs === 0){\n                push(callback);\n              }\n            }\n          })\n        })(i)}\n      })\n    })\n    if (!app.doc.__attachments || app.doc.__attachments.length == 0) push(callback);\n  }  \n  \n  app.sync = function (callback) {\n    // A few notes.\n    //   File change events are stored in an array and bundled up in to one write call., \n    // this reduces the amount of unnecessary processing as we get a lof of change events.\n    //   The file descriptors are stored and re-used because it cuts down on the number of bad change events.\n    //   And finally, we check the md5 and only push when the document is actually been changed.\n    //   A lot of crazy workarounds for the fact that we basically get an event every time someone\n    // looks funny at the underlying files and even reading and opening fds to check on the file trigger\n    // more events.\n    \n    app.push(function () {\n      var changes = [];\n      console.log('Watching files for changes...')\n      app.doc.__attachments.forEach(function (att) {\n        var pre = att.root\n        var slash = (process.platform === 'win32') ? '\\\\' : '/';\n        if (pre[pre.length - 1] !== slash) pre += slash;\n        watch.createMonitor(att.root, {ignoreDotFiles:true}, function (monitor) {\n          monitor.on(\"removed\", function (f, stat) {\n            f = f.replace(pre, '');\n            changes.push([null, f]);\n          })\n          monitor.on(\"created\", function (f, stat) {\n            changes.push([f, f.replace(pre, ''), stat]);\n          })\n          monitor.on(\"changed\", function (f, curr, prev) {\n            changes.push([f, f.replace(pre, ''), curr]);\n          })\n        })\n      })\n      var check = function () {\n        var pending = 0\n          , revpos = parseInt(app.doc._rev.slice(0,app.doc._rev.indexOf('-')))\n          , dirty = false\n          ;\n        if (changes.length > 0) {\n          changes.forEach(function (change) {\n            if (!change[0]) {\n              delete app.doc._attachments[change[1]];\n              dirty = true;\n              console.log(\"Removed \"+change[1]);\n            } else {\n              pending += 1\n              \n              fs.readFile(change[0], function (err, data) {\n                var f = change[1]\n                  , d = data.toString('base64')\n                  , md5 = crypto.createHash('md5')\n                  , mime = mimetypes.lookup(path.extname(f).slice(1))\n                  ;\n\n                md5.update(d)\n                md5 = md5.digest('hex')\n                pending -= 1\n                if (!app.doc.attachments_md5[f] || (md5 !== app.doc.attachments_md5[f].md5) ) {\n                  app.doc._attachments[f] = {data:d, content_type:mime};\n                  app.doc.attachments_md5[f] = {revpos:revpos + 1, md5:md5};\n                  dirty = true;\n                  console.log(\"Changed \"+change[0]);\n                }\n                if (pending == 0 && dirty) push(function () {dirty = false; setTimeout(check, 50)})\n                else if (pending == 0 && !dirty) setTimeout(check, 50)\n                \n              })\n            }\n            \n          })\n          changes = []\n          if (pending == 0 && dirty) push(function () {dirty = false; setTimeout(check, 50)})\n          else if (pending == 0 && !dirty) setTimeout(check, 50)\n        } else {\n          setTimeout(check, 50);\n        }\n      }\n      setTimeout(check, 50)\n    })\n  }\n  var _id = doc.app ? doc.app._id : doc._id\n  \n  if (url.slice(url.length - _id.length) !== _id) url += '/' + _id;\n\n  request({uri:url, headers:h}, function (err, resp, body) {\n    if (err) throw err;\n    if (resp.statusCode == 404) app.current = {};\n    else if (resp.statusCode !== 200) throw new Error(\"Failed to get doc\\n\"+body)\n    else app.current = JSON.parse(body)\n    cb(app)\n  })\n}\n\nexports.createApp = createApp\nexports.loadAttachments = loadAttachments\nexports.bin = require('./bin')\nexports.loadFiles = loadFiles\n","/home/travis/build/npmtest/node-npmtest-couchapp/node_modules/couchapp/mimetypes.js":"// from http://github.com/felixge/node-paperboy\nexports.types = {\n  \"aiff\":\"audio/x-aiff\",\n  \"appcache\":\"text/cache-manifest\",\n  \"arj\":\"application/x-arj-compressed\",\n  \"asf\":\"video/x-ms-asf\",\n  \"asx\":\"video/x-ms-asx\",\n  \"au\":\"audio/ulaw\",\n  \"avi\":\"video/x-msvideo\",\n  \"bcpio\":\"application/x-bcpio\",\n  \"ccad\":\"application/clariscad\",\n  \"cod\":\"application/vnd.rim.cod\",\n  \"com\":\"application/x-msdos-program\",\n  \"cpio\":\"application/x-cpio\",\n  \"cpt\":\"application/mac-compactpro\",\n  \"csh\":\"application/x-csh\",\n  \"css\":\"text/css\",\n  \"deb\":\"application/x-debian-package\",\n  \"dl\":\"video/dl\",\n  \"doc\":\"application/msword\",\n  \"drw\":\"application/drafting\",\n  \"dvi\":\"application/x-dvi\",\n  \"dwg\":\"application/acad\",\n  \"dxf\":\"application/dxf\",\n  \"dxr\":\"application/x-director\",\n  \"etx\":\"text/x-setext\",\n  \"ez\":\"application/andrew-inset\",\n  \"fli\":\"video/x-fli\",\n  \"flv\":\"video/x-flv\",\n  \"gif\":\"image/gif\",\n  \"gl\":\"video/gl\",\n  \"gtar\":\"application/x-gtar\",\n  \"gz\":\"application/x-gzip\",\n  \"hdf\":\"application/x-hdf\",\n  \"hqx\":\"application/mac-binhex40\",\n  \"html\":\"text/html\",\n  \"ice\":\"x-conference/x-cooltalk\",\n  \"ico\":\"image/x-icon\",\n  \"ief\":\"image/ief\",\n  \"igs\":\"model/iges\",\n  \"ips\":\"application/x-ipscript\",\n  \"ipx\":\"application/x-ipix\",\n  \"jad\":\"text/vnd.sun.j2me.app-descriptor\",\n  \"jar\":\"application/java-archive\",\n  \"jpeg\":\"image/jpeg\",\n  \"jpg\":\"image/jpeg\",\n  \"js\":\"text/javascript\",\n  \"json\":\"application/json\",\n  \"latex\":\"application/x-latex\",\n  \"lsp\":\"application/x-lisp\",\n  \"lzh\":\"application/octet-stream\",\n  \"m\":\"text/plain\",\n  \"m3u\":\"audio/x-mpegurl\",\n  \"man\":\"application/x-troff-man\",\n  \"me\":\"application/x-troff-me\",\n  \"midi\":\"audio/midi\",\n  \"mif\":\"application/x-mif\",\n  \"mime\":\"www/mime\",\n  \"movie\":\"video/x-sgi-movie\",\n  \"mustache\":\"text/plain\",\n  \"mp4\":\"video/mp4\",\n  \"mpg\":\"video/mpeg\",\n  \"mpga\":\"audio/mpeg\",\n  \"ms\":\"application/x-troff-ms\",\n  \"nc\":\"application/x-netcdf\",\n  \"oda\":\"application/oda\",\n  \"ogm\":\"application/ogg\",\n  \"pbm\":\"image/x-portable-bitmap\",\n  \"pdf\":\"application/pdf\",\n  \"pgm\":\"image/x-portable-graymap\",\n  \"pgn\":\"application/x-chess-pgn\",\n  \"pgp\":\"application/pgp\",\n  \"pm\":\"application/x-perl\",\n  \"png\":\"image/png\",\n  \"pnm\":\"image/x-portable-anymap\",\n  \"ppm\":\"image/x-portable-pixmap\",\n  \"ppz\":\"application/vnd.ms-powerpoint\",\n  \"pre\":\"application/x-freelance\",\n  \"prt\":\"application/pro_eng\",\n  \"ps\":\"application/postscript\",\n  \"qt\":\"video/quicktime\",\n  \"ra\":\"audio/x-realaudio\",\n  \"rar\":\"application/x-rar-compressed\",\n  \"ras\":\"image/x-cmu-raster\",\n  \"rgb\":\"image/x-rgb\",\n  \"rm\":\"audio/x-pn-realaudio\",\n  \"rpm\":\"audio/x-pn-realaudio-plugin\",\n  \"rtf\":\"text/rtf\",\n  \"rtx\":\"text/richtext\",\n  \"scm\":\"application/x-lotusscreencam\",\n  \"set\":\"application/set\",\n  \"sgml\":\"text/sgml\",\n  \"sh\":\"application/x-sh\",\n  \"shar\":\"application/x-shar\",\n  \"silo\":\"model/mesh\",\n  \"sit\":\"application/x-stuffit\",\n  \"skt\":\"application/x-koan\",\n  \"smil\":\"application/smil\",\n  \"snd\":\"audio/basic\",\n  \"sol\":\"application/solids\",\n  \"spl\":\"application/x-futuresplash\",\n  \"src\":\"application/x-wais-source\",\n  \"stl\":\"application/SLA\",\n  \"stp\":\"application/STEP\",\n  \"sv4cpio\":\"application/x-sv4cpio\",\n  \"sv4crc\":\"application/x-sv4crc\",\n  \"svg\":\"image/svg+xml\",\n  \"swf\":\"application/x-shockwave-flash\",\n  \"tar\":\"application/x-tar\",\n  \"tcl\":\"application/x-tcl\",\n  \"tex\":\"application/x-tex\",\n  \"texinfo\":\"application/x-texinfo\",\n  \"tgz\":\"application/x-tar-gz\",\n  \"tiff\":\"image/tiff\",\n  \"tr\":\"application/x-troff\",\n  \"tsi\":\"audio/TSP-audio\",\n  \"tsp\":\"application/dsptype\",\n  \"tsv\":\"text/tab-separated-values\",\n  \"unv\":\"application/i-deas\",\n  \"ustar\":\"application/x-ustar\",\n  \"vcd\":\"application/x-cdlink\",\n  \"vda\":\"application/vda\",\n  \"vivo\":\"video/vnd.vivo\",\n  \"vrm\":\"x-world/x-vrml\",\n  \"wav\":\"audio/x-wav\",\n  \"wax\":\"audio/x-ms-wax\",\n  \"wma\":\"audio/x-ms-wma\",\n  \"wmv\":\"video/x-ms-wmv\",\n  \"wmx\":\"video/x-ms-wmx\",\n  \"wrl\":\"model/vrml\",\n  \"wvx\":\"video/x-ms-wvx\",\n  \"xbm\":\"image/x-xbitmap\",\n  \"xlw\":\"application/vnd.ms-excel\",\n  \"xml\":\"text/xml\",\n  \"xpm\":\"image/x-xpixmap\",\n  \"xwd\":\"image/x-xwindowdump\",\n  \"xyz\":\"chemical/x-pdb\",\n  \"zip\":\"application/zip\",\n};\n\nexports.lookup = function(ext, defaultType) {\n  defaultType = defaultType || 'application/octet-stream';\n\n  return (ext in exports.types)\n    ? exports.types[ext]\n    : defaultType;\n};\n","/home/travis/build/npmtest/node-npmtest-couchapp/node_modules/couchapp/bin.js":"#!/usr/bin/env node\n\nvar couchapp = require('./main.js')\n  , watch = require('watch')\n  , path = require('path')\n  , fs = require('fs')\n  ;\n\nfunction abspath (pathname) {\n  if (pathname[0] === '/') return pathname\n  return path.join(process.cwd(), path.normalize(pathname));\n}\n\nfunction copytree (source, dest) {\n  watch.walk(source, function (err  , files) {\n    for (i in files) {\n      (function (i) {\n        if (files[i].isDirectory()) {\n          try {\n            fs.mkdirSync(i.replace(source, dest), 0755)\n          } catch(e) {\n            console.log('Could not create '+dest)\n          }\n        } else {\n          fs.readFile(i, function (err, data) {\n            if (err) throw err;\n            fs.writeFile(i.replace(source, dest), data, function (err) {\n              if (err) throw err;\n            });\n          })\n        }\n      })(i);\n    }\n  })\n}\n\nfunction boiler (app) {\n  if (app) {\n    try { fs.mkdirSync(path.join(process.cwd(), app)) }\n    catch(e) {};\n  }\n  app = app || '.'\n\n  copytree(path.join(__dirname, 'boiler'), path.join(process.cwd(), app));\n\n\n}\n\n\nfunction onBeforePushSync() {\n  if (beforePushSyncListener && typeof beforePushSyncListener.onBeforePushSync === \"function\") {\n    beforePushSyncListener.onBeforePushSync();\n  }\n}\nfunction onAfterPushSync() {\n  if (afterPushSyncListener && typeof afterPushSyncListener.onAfterPushSync === \"function\") {\n    afterPushSyncListener.onAfterPushSync();\n  }\n}\nvar _isUsingDirectoryConfig;\nfunction isUsingDirectoryConfig() {\n  if(_isUsingDirectoryConfig != null)\n    return _isUsingDirectoryConfig;\n  return _isUsingDirectoryConfig = (process.argv[2] && (process.argv[2].trim() === \"-dc\"));\n}\n\nif (process.mainModule && process.mainModule.filename === __filename) {\n  var node\n    , bin\n    , command\n    , app\n    , couch\n    , configDirectory\n    , configFileNames\n    , apps = []\n    , beforePushSyncListener\n    , afterPushSyncListener\n    ;\n\n  //check for directory-based config, if so then read rather than shift() the arguments: will need to read them again later\n  if (isUsingDirectoryConfig()) {\n    node = process.argv[0];\n    bin = process.argv[1];\n    command = process.argv[3];\n    configDirectory = process.argv[4];\n    couch = process.argv[5];\n    configFileNames = fs.readdirSync(configDirectory);\n    if (configFileNames) {\n      configFileNames.forEach(function (value, index) {\n        //any files starting with \"app\" are included as app files e.g. app.js, app_number1.js etc.\n        if (value.indexOf(\"app\") == 0) {\n          apps.push(path.join(configDirectory, value));\n        }\n        //\"before\" listener must be called beforepushsync.js and be in the config directory\n        else if (value.toLowerCase().trim() === \"beforepushsync.js\") {\n          beforePushSyncListener = require(abspath(path.join(configDirectory, \"beforepushsync.js\")));\n        }\n        //\"after\" listener must be called afterpushsync.js and be in the config directory\n        else if (value.toLowerCase().trim() === \"afterpushsync.js\") {\n          afterPushSyncListener = require(abspath(path.join(configDirectory, \"afterpushsync.js\")));\n        }\n      });\n    }\n  }\n  else {\n    node = process.argv.shift();\n    bin = process.argv.shift();\n    command = process.argv.shift();\n    app = process.argv.shift();\n    couch = process.argv.shift();\n  }\n\n  if (command == 'help' || command == undefined) {\n    console.log(\n      [ \"couchapp -- utility for creating couchapps\"\n        , \"\"\n        , \"Usage:\"\n        , \"(backwardly compatible without switch - single app file)\"\n        , \"  couchapp <command> app.js http://localhost:5984/dbname [opts]\"\n        , \"(directory based config specified by switch - multiple app files and pre- and post-processing capability)\"\n        , \" couchapp -dc <command> <appconfigdirectory> http://localhost:5984/dbname\"\n        , \"\"\n        , \"Commands:\"\n        , \"  push   : Push app once to server.\"\n        , \"  sync   : Push app then watch local files for changes.\"\n        , \"  boiler : Create a boiler project.\"\n        , \"  serve  : Serve couchapp from development webserver\"\n        , \"            you can specify some options \"\n        , \"            -p port  : list on port portNum [default=3000]\"\n        , \"            -d dir   : attachments directory [default='attachments']\"\n        , \"            -l       : log rewrites to couchdb [default='false']\"\n      ]\n      .join('\\n')\n    )\n    process.exit();\n  }\n  \n  if (couch == undefined) {\n    try {\n      couch = JSON.parse(fs.readFileSync('.couchapp.json')).couch;\n    } catch (e) {\n      // Discard exception: absent or malformed config file\n    }\n  }\n\n  if (isUsingDirectoryConfig()) {\n    if (command == 'boiler') {\n      for (i in apps) {\n        boiler(apps[i]);\n      }\n    } else {\n      onBeforePushSync();\n      for (i in apps) {\n        //an immediately executed function is used so the loop counter variable is available\n        //in createApp's callback function: multiple calls to push/sync are supported and\n        //onAfterPushSync is supplied as the callback function on the last call\n        (function keepLoopCounter(i) {\n          couchapp.createApp(require(abspath(apps[i])), couch, function (app) {\n            if (command == 'push') {\n              app.push(i == apps.length - 1 ? onAfterPushSync : null);\n            }\n            else if (command == 'sync') {\n              app.sync(i == apps.length ? onAfterPushSync : null);\n            }\n          });\n        })(i);\n      }\n\n    }\n  }\n  else {\n    if (command == 'boiler') {\n      boiler(app);\n    } else {\n      couchapp.createApp(require(abspath(app)), couch, function (app) {\n        if (command == 'push') app.push()\n        else if (command == 'sync') app.sync()\n        else if (command == 'serve') serve(app);\n        \n      })\n    }\n  }\n\n}\n\n// Start a development web server on app\nfunction serve(app) {\n  var url = require('url');\n  var port = 3000,\n      staticDir = 'attachments',\n      tmpDir = '/tmp/couchapp-compile-' + process.pid,\n      logDbRewrites = false;\n  var arg;\n  while(arg = process.argv.shift()){\n    if(arg == '-p'){\n      port = parseInt(process.argv.shift());\n    }\n    if(arg == '-d'){\n      staticDir = process.argv.shift();\n    }\n    if(arg == '-l'){\n      logDbRewrites = true;\n    }\n  }\n  var dbUrlObj = url.parse(couch);\n\n  var proxyPaths = {}\n  var dbPrefix = '../../';\n  for (var i in app.doc.rewrites){\n    var rw = app.doc.rewrites[i];\n    // Rewrites starting with '../../' are proxied to the database\n    if (rw.to.indexOf(dbPrefix) == 0){\n      var proxyPath = rw.from;\n      if(proxyPath[proxyPath.length -1] == '*') {\n        proxyPath = proxyPath.substring(0,proxyPath.length-1)\n      }\n      var dbPath = rw.to.substring(dbPrefix.length);\n      if(dbPath[dbPath.length - 1] == '*'){\n        dbPath = dbPath.substring(0,dbPath.length-1)\n      }\n      if(dbPath.indexOf('*') >=0 ){\n        if(logDbRewrites){\n          console.log(\"Don't know how to proxy '\" + rw.from + \"' to CouchDB at \" + rw.from );\n        }\n      } else {\n        proxyPaths[proxyPath] =\n          dbUrlObj.protocol + '//' + dbUrlObj.host +\n          path.normalize(dbUrlObj.pathname + dbPath);\n          if(logDbRewrites){\n            console.log(\"Proxying rewrite '\" + proxyPath + \"' to CouchDB at \" + proxyPaths[proxyPath] );\n          }\n      }\n    }\n  }\n\n  var connect = require('connect');\n  var httpProxy = require('http-proxy'),\n      connect   = require('connect'),\n      connectCompiler;\n  try{\n      connectCompiler = require('connect-compiler');\n  } catch(e) {}\n\n\n  var proxy = new httpProxy.HttpProxy({\n    target: {\n      host: dbUrlObj.host,\n      hostname: dbUrlObj.hostname,\n      port: dbUrlObj.port,\n      https: dbUrlObj.protocol == 'https:',\n    }\n  });\n  var app = connect()\n    .use(connect.logger('dev'))\n    .use(connect.static(staticDir));\n  if(connectCompiler){\n    console.log('Will compile assets with connect-assets.');\n    var ignore = [];\n    var quote = function(str) {\n      return (str+'').replace(/([.?*+^$[\\]\\\\(){}|-])/g, \"\\\\$1\");\n    }\n    for(var prefix in proxyPaths){\n      ignore.push(quote(prefix));\n    }\n    if(ignore.length){\n      //console.log(\"Asset compile ignore paths:\", '^(' +  ignore.join('|') + ')');\n      ignore  = new RegExp('^(' +  ignore.join('|') + ')');\n    } else {\n      ignore = null;\n    }\n    app.use(connectCompiler({\n      enabled: ['coffee'] ,\n      src: staticDir,\n      dest: tmpDir,\n      ignore :  ignore,\n    }))\n    .use(connect.static(tmpDir));\n  }\n  app.use(function(req, res, next) {\n      for(var prefix in proxyPaths){\n        var dbPath = proxyPaths[prefix];\n        if (req.url.indexOf(prefix) === 0) {\n          var dbURL = req.url.replace(prefix,dbPath);\n          if(logDbRewrites){\n            console.log(\"*** \", req.url , ' -> ', dbURL);\n          }\n          req.url = dbURL;\n          req.headers['host'] = dbUrlObj.host;\n          proxy.proxyRequest(req, res);\n          return;\n        }\n      }\n      var body = '404 Not found.\\nNo static file or db route matched.';\n      res.statusCode = 404;\n      res.setHeader('Content-Length', body.length);\n      res.end(body);\n     })\n    .use(connect.errorHandler())\n    .listen(port);\n  console.log(\"Serving couchapp at: http://0.0.0.0:\" + port +\"/\");\n\n  //Cleanup the temp directory on exit\n  var cleanup = function(){\n    var rmDir = function(dirPath) {\n      try { var files = fs.readdirSync(dirPath); }\n      catch(e) { return; }\n      if (files.length > 0)\n        for (var i = 0; i < files.length; i++) {\n          var filePath = dirPath + '/' + files[i];\n          if (fs.statSync(filePath).isFile())\n            fs.unlinkSync(filePath);\n          else\n            rmDir(filePath);\n        }\n      fs.rmdirSync(dirPath);\n    };\n    rmDir(tmpDir);\n  };\n  process.on('exit',cleanup);\n  process.on('SIGINT',function(){\n    cleanup()\n    process.exit();\n  });\n}\n\nexports.boilerDirectory = path.join(__dirname, 'boiler')\n\n","/home/travis/build/npmtest/node-npmtest-couchapp/node_modules/couchapp/boiler/app.js":" var couchapp = require('couchapp')\n  , path = require('path')\n  ;\n\nddoc = \n  { _id:'_design/app'\n  , rewrites : \n    [ {from:\"/\", to:'index.html'}\n    , {from:\"/api\", to:'../../'}\n    , {from:\"/api/*\", to:'../../*'}\n    , {from:\"/*\", to:'*'}\n    ]\n  }\n  ;\n\nddoc.views = {};\n\nddoc.validate_doc_update = function (newDoc, oldDoc, userCtx) {   \n  if (newDoc._deleted === true && userCtx.roles.indexOf('_admin') === -1) {\n    throw \"Only admin can delete documents on this database.\";\n  } \n}\n\ncouchapp.loadAttachments(ddoc, path.join(__dirname, 'attachments'));\n\nmodule.exports = ddoc;","/home/travis/build/npmtest/node-npmtest-couchapp/node_modules/couchapp/boiler/attachments/site.js":"var request = function (options, callback) {\n  options.success = function (obj) {\n    callback(null, obj);\n  }\n  options.error = function (err) {\n    if (err) callback(err);\n    else callback(true);\n  }\n  if (options.data && typeof options.data == 'object') {\n    options.data = JSON.stringify(options.data)\n  }\n  if (!options.dataType) options.processData = false;\n  if (!options.dataType) options.contentType = 'application/json';\n  if (!options.dataType) options.dataType = 'json';\n  $.ajax(options)\n}\n\n$.expr[\":\"].exactly = function(obj, index, meta, stack){ \n  return ($(obj).text() == meta[3])\n}\n\nvar param = function( a ) {\n  // Query param builder from jQuery, had to copy out to remove conversion of spaces to +\n  // This is important when converting datastructures to querystrings to send to CouchDB.\n\tvar s = [];\n\tif ( jQuery.isArray(a) || a.jquery ) {\n\t\tjQuery.each( a, function() { add( this.name, this.value ); });\t\t\n\t} else { \n\t  for ( var prefix in a ) { buildParams( prefix, a[prefix] ); }\n\t}\n  return s.join(\"&\");\n\tfunction buildParams( prefix, obj ) {\n\t\tif ( jQuery.isArray(obj) ) {\n\t\t\tjQuery.each( obj, function( i, v ) {\n\t\t\t\tif (  /\\[\\]$/.test( prefix ) ) { add( prefix, v );\n\t\t\t\t} else { buildParams( prefix + \"[\" + ( typeof v === \"object\" || jQuery.isArray(v) ? i : \"\") +\"]\", v )}\n\t\t\t});\t\t\t\t\n\t\t} else if (  obj != null && typeof obj === \"object\" ) {\n\t\t\tjQuery.each( obj, function( k, v ) { buildParams( prefix + \"[\" + k + \"]\", v ); });\t\t\t\t\n\t\t} else { add( prefix, obj ); }\n\t}\n\tfunction add( key, value ) {\n\t\tvalue = jQuery.isFunction(value) ? value() : value;\n\t\ts[ s.length ] = encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n\t}\n}\n\nvar app = {};\napp.index = function () {\n  \n};\n\n$(function () { \n  app.s = $.sammy(function () {\n    // Index of all databases\n    this.get('', app.index);\n    this.get(\"#/\", app.index);\n  })\n  app.s.run();\n});\n","/home/travis/build/npmtest/node-npmtest-couchapp/node_modules/couchapp/boiler/attachments/sammy/sammy.js":"// name: sammy\n// version: 0.6.0pre\n\n(function($) {\n\n  var Sammy,\n      PATH_REPLACER = \"([^\\/]+)\",\n      PATH_NAME_MATCHER = /:([\\w\\d]+)/g,\n      QUERY_STRING_MATCHER = /\\?([^#]*)$/,\n      // mainly for making `arguments` an Array\n      _makeArray = function(nonarray) { return Array.prototype.slice.call(nonarray); },\n      // borrowed from jQuery\n      _isFunction = function( obj ) { return Object.prototype.toString.call(obj) === \"[object Function]\"; },\n      _isArray = function( obj ) { return Object.prototype.toString.call(obj) === \"[object Array]\"; },\n      _decode = decodeURIComponent,\n      _escapeHTML = function(s) {\n        return s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');\n      },\n      _routeWrapper = function(verb) {\n        return function(path, callback) { return this.route.apply(this, [verb, path, callback]); };\n      },\n      _template_cache = {},\n      loggers = [];\n\n\n  // `Sammy` (also aliased as $.sammy) is not only the namespace for a\n  // number of prototypes, its also a top level method that allows for easy\n  // creation/management of `Sammy.Application` instances. There are a\n  // number of different forms for `Sammy()` but each returns an instance\n  // of `Sammy.Application`. When a new instance is created using\n  // `Sammy` it is added to an Object called `Sammy.apps`. This\n  // provides for an easy way to get at existing Sammy applications. Only one\n  // instance is allowed per `element_selector` so when calling\n  // `Sammy('selector')` multiple times, the first time will create\n  // the application and the following times will extend the application\n  // already added to that selector.\n  //\n  // ### Example\n  //\n  //      // returns the app at #main or a new app\n  //      Sammy('#main')\n  //\n  //      // equivilent to \"new Sammy.Application\", except appends to apps\n  //      Sammy();\n  //      Sammy(function() { ... });\n  //\n  //      // extends the app at '#main' with function.\n  //      Sammy('#main', function() { ... });\n  //\n  Sammy = function() {\n    var args = _makeArray(arguments),\n        app, selector;\n    Sammy.apps = Sammy.apps || {};\n    if (args.length === 0 || args[0] && _isFunction(args[0])) { // Sammy()\n      return Sammy.apply(Sammy, ['body'].concat(args));\n    } else if (typeof (selector = args.shift()) == 'string') { // Sammy('#main')\n      app = Sammy.apps[selector] || new Sammy.Application();\n      app.element_selector = selector;\n      if (args.length > 0) {\n        $.each(args, function(i, plugin) {\n          app.use(plugin);\n        });\n      }\n      // if the selector changes make sure the refrence in Sammy.apps changes\n      if (app.element_selector != selector) {\n        delete Sammy.apps[selector];\n      }\n      Sammy.apps[app.element_selector] = app;\n      return app;\n    }\n  };\n\n  Sammy.VERSION = '0.6.0';\n\n  // Add to the global logger pool. Takes a function that accepts an\n  // unknown number of arguments and should print them or send them somewhere\n  // The first argument is always a timestamp.\n  Sammy.addLogger = function(logger) {\n    loggers.push(logger);\n  };\n\n  // Sends a log message to each logger listed in the global\n  // loggers pool. Can take any number of arguments.\n  // Also prefixes the arguments with a timestamp.\n  Sammy.log = function()  {\n    var args = _makeArray(arguments);\n    args.unshift(\"[\" + Date() + \"]\");\n    $.each(loggers, function(i, logger) {\n      logger.apply(Sammy, args);\n    });\n  };\n\n  if (typeof window.console != 'undefined') {\n    if (_isFunction(console.log.apply)) {\n      Sammy.addLogger(function() {\n        window.console.log.apply(console, arguments);\n      });\n    } else {\n      Sammy.addLogger(function() {\n        window.console.log(arguments);\n      });\n    }\n  } else if (typeof console != 'undefined') {\n    Sammy.addLogger(function() {\n      console.log.apply(console, arguments);\n    });\n  }\n\n  $.extend(Sammy, {\n    makeArray: _makeArray,\n    isFunction: _isFunction,\n    isArray: _isArray\n  })\n\n  // Sammy.Object is the base for all other Sammy classes. It provides some useful\n  // functionality, including cloning, iterating, etc.\n  Sammy.Object = function(obj) { // constructor\n    return $.extend(this, obj || {});\n  };\n\n  $.extend(Sammy.Object.prototype, {\n\n    // Escape HTML in string, use in templates to prevent script injection.\n    // Also aliased as `h()`\n    escapeHTML: _escapeHTML,\n    h: _escapeHTML,\n\n    // Returns a copy of the object with Functions removed.\n    toHash: function() {\n      var json = {};\n      $.each(this, function(k,v) {\n        if (!_isFunction(v)) {\n          json[k] = v;\n        }\n      });\n      return json;\n    },\n\n    // Renders a simple HTML version of this Objects attributes.\n    // Does not render functions.\n    // For example. Given this Sammy.Object:\n    //\n    //    var s = new Sammy.Object({first_name: 'Sammy', last_name: 'Davis Jr.'});\n    //    s.toHTML() //=> '<strong>first_name</strong> Sammy<br /><strong>last_name</strong> Davis Jr.<br />'\n    //\n    toHTML: function() {\n      var display = \"\";\n      $.each(this, function(k, v) {\n        if (!_isFunction(v)) {\n          display += \"<strong>\" + k + \"</strong> \" + v + \"<br />\";\n        }\n      });\n      return display;\n    },\n\n    // Returns an array of keys for this object. If `attributes_only`\n    // is true will not return keys that map to a `function()`\n    keys: function(attributes_only) {\n      var keys = [];\n      for (var property in this) {\n        if (!_isFunction(this[property]) || !attributes_only) {\n          keys.push(property);\n        }\n      }\n      return keys;\n    },\n\n    // Checks if the object has a value at `key` and that the value is not empty\n    has: function(key) {\n      return this[key] && $.trim(this[key].toString()) != '';\n    },\n\n    // convenience method to join as many arguments as you want\n    // by the first argument - useful for making paths\n    join: function() {\n      var args = _makeArray(arguments);\n      var delimiter = args.shift();\n      return args.join(delimiter);\n    },\n\n    // Shortcut to Sammy.log\n    log: function() {\n      Sammy.log.apply(Sammy, arguments);\n    },\n\n    // Returns a string representation of this object.\n    // if `include_functions` is true, it will also toString() the\n    // methods of this object. By default only prints the attributes.\n    toString: function(include_functions) {\n      var s = [];\n      $.each(this, function(k, v) {\n        if (!_isFunction(v) || include_functions) {\n          s.push('\"' + k + '\": ' + v.toString());\n        }\n      });\n      return \"Sammy.Object: {\" + s.join(',') + \"}\";\n    }\n  });\n\n  // The HashLocationProxy is the default location proxy for all Sammy applications.\n  // A location proxy is a prototype that conforms to a simple interface. The purpose\n  // of a location proxy is to notify the Sammy.Application its bound to when the location\n  // or 'external state' changes. The HashLocationProxy considers the state to be\n  // changed when the 'hash' (window.location.hash / '#') changes. It does this in two\n  // different ways depending on what browser you are using. The newest browsers\n  // (IE, Safari > 4, FF >= 3.6) support a 'onhashchange' DOM event, thats fired whenever\n  // the location.hash changes. In this situation the HashLocationProxy just binds\n  // to this event and delegates it to the application. In the case of older browsers\n  // a poller is set up to track changes to the hash. Unlike Sammy 0.3 or earlier,\n  // the HashLocationProxy allows the poller to be a global object, eliminating the\n  // need for multiple pollers even when thier are multiple apps on the page.\n  Sammy.HashLocationProxy = function(app, run_interval_every) {\n    this.app = app;\n    // set is native to false and start the poller immediately\n    this.is_native = false;\n    this._startPolling(run_interval_every);\n  };\n\n  Sammy.HashLocationProxy.prototype = {\n\n    // bind the proxy events to the current app.\n    bind: function() {\n      var proxy = this, app = this.app;\n      $(window).bind('hashchange.' + this.app.eventNamespace(), function(e, non_native) {\n        // if we receive a native hash change event, set the proxy accordingly\n        // and stop polling\n        if (proxy.is_native === false && !non_native) {\n          Sammy.log('native hash change exists, using');\n          proxy.is_native = true;\n          clearInterval(Sammy.HashLocationProxy._interval);\n        }\n        app.trigger('location-changed');\n      });\n      if (!Sammy.HashLocationProxy._bindings) {\n        Sammy.HashLocationProxy._bindings = 0;\n      }\n      Sammy.HashLocationProxy._bindings++;\n    },\n\n    // unbind the proxy events from the current app\n    unbind: function() {\n      $(window).unbind('hashchange.' + this.app.eventNamespace());\n      Sammy.HashLocationProxy._bindings--;\n      if (Sammy.HashLocationProxy._bindings <= 0) {\n        clearInterval(Sammy.HashLocationProxy._interval);\n      }\n    },\n\n    // get the current location from the hash.\n    getLocation: function() {\n     // Bypass the `window.location.hash` attribute.  If a question mark\n      // appears in the hash IE6 will strip it and all of the following\n      // characters from `window.location.hash`.\n      var matches = window.location.toString().match(/^[^#]*(#.+)$/);\n      return matches ? matches[1] : '';\n    },\n\n    // set the current location to `new_location`\n    setLocation: function(new_location) {\n      return (window.location = new_location);\n    },\n\n    _startPolling: function(every) {\n      // set up interval\n      var proxy = this;\n      if (!Sammy.HashLocationProxy._interval) {\n        if (!every) { every = 10; }\n        var hashCheck = function() {\n          current_location = proxy.getLocation();\n          if (!Sammy.HashLocationProxy._last_location ||\n            current_location != Sammy.HashLocationProxy._last_location) {\n            setTimeout(function() {\n              $(window).trigger('hashchange', [true]);\n            }, 13);\n          }\n          Sammy.HashLocationProxy._last_location = current_location;\n        };\n        hashCheck();\n        Sammy.HashLocationProxy._interval = setInterval(hashCheck, every);\n      }\n    }\n  };\n\n\n  // Sammy.Application is the Base prototype for defining 'applications'.\n  // An 'application' is a collection of 'routes' and bound events that is\n  // attached to an element when `run()` is called.\n  // The only argument an 'app_function' is evaluated within the context of the application.\n  Sammy.Application = function(app_function) {\n    var app = this;\n    this.routes            = {};\n    this.listeners         = new Sammy.Object({});\n    this.arounds           = [];\n    this.befores           = [];\n    // generate a unique namespace\n    this.namespace         = (new Date()).getTime() + '-' + parseInt(Math.random() * 1000, 10);\n    this.context_prototype = function() { Sammy.EventContext.apply(this, arguments); };\n    this.context_prototype.prototype = new Sammy.EventContext();\n\n    if (_isFunction(app_function)) {\n      app_function.apply(this, [this]);\n    }\n    // set the location proxy if not defined to the default (HashLocationProxy)\n    if (!this._location_proxy) {\n      this.setLocationProxy(new Sammy.HashLocationProxy(this, this.run_interval_every));\n    }\n    if (this.debug) {\n      this.bindToAllEvents(function(e, data) {\n        app.log(app.toString(), e.cleaned_type, data || {});\n      });\n    }\n  };\n\n  Sammy.Application.prototype = $.extend({}, Sammy.Object.prototype, {\n\n    // the four route verbs\n    ROUTE_VERBS: ['get','post','put','delete'],\n\n    // An array of the default events triggered by the\n    // application during its lifecycle\n    APP_EVENTS: ['run','unload','lookup-route','run-route','route-found','event-context-before','event-context-after','changed','error','check-form-submission','redirect'],\n\n    _last_route: null,\n    _location_proxy: null,\n    _running: false,\n\n    // Defines what element the application is bound to. Provide a selector\n    // (parseable by `jQuery()`) and this will be used by `$element()`\n    element_selector: 'body',\n\n    // When set to true, logs all of the default events using `log()`\n    debug: false,\n\n    // When set to true, and the error() handler is not overriden, will actually\n    // raise JS errors in routes (500) and when routes can't be found (404)\n    raise_errors: false,\n\n    // The time in milliseconds that the URL is queried for changes\n    run_interval_every: 50,\n\n    // The default template engine to use when using `partial()` in an\n    // `EventContext`. `template_engine` can either be a string that\n    // corresponds to the name of a method/helper on EventContext or it can be a function\n    // that takes two arguments, the content of the unrendered partial and an optional\n    // JS object that contains interpolation data. Template engine is only called/refered\n    // to if the extension of the partial is null or unknown. See `partial()`\n    // for more information\n    template_engine: null,\n\n    // //=> Sammy.Application: body\n    toString: function() {\n      return 'Sammy.Application:' + this.element_selector;\n    },\n\n    // returns a jQuery object of the Applications bound element.\n    $element: function() {\n      return $(this.element_selector);\n    },\n\n    // `use()` is the entry point for including Sammy plugins.\n    // The first argument to use should be a function() that is evaluated\n    // in the context of the current application, just like the `app_function`\n    // argument to the `Sammy.Application` constructor.\n    //\n    // Any additional arguments are passed to the app function sequentially.\n    //\n    // For much more detail about plugins, check out:\n    // http://code.quirkey.com/sammy/doc/plugins.html\n    //\n    // ### Example\n    //\n    //      var MyPlugin = function(app, prepend) {\n    //\n    //        this.helpers({\n    //          myhelper: function(text) {\n    //            alert(prepend + \" \" + text);\n    //          }\n    //        });\n    //\n    //      };\n    //\n    //      var app = $.sammy(function() {\n    //\n    //        this.use(MyPlugin, 'This is my plugin');\n    //\n    //        this.get('#/', function() {\n    //          this.myhelper('and dont you forget it!');\n    //          //=> Alerts: This is my plugin and dont you forget it!\n    //        });\n    //\n    //      });\n    //\n    // If plugin is passed as a string it assumes your are trying to load\n    // Sammy.\"Plugin\". This is the prefered way of loading core Sammy plugins\n    // as it allows for better error-messaging.\n    //\n    // ### Example\n    //\n    //      $.sammy(function() {\n    //        this.use('Mustache'); //=> Sammy.Mustache\n    //        this.use('Storage'); //=> Sammy.Storage\n    //      });\n    //\n    use: function() {\n      // flatten the arguments\n      var args = _makeArray(arguments),\n          plugin = args.shift(),\n          plugin_name = plugin || '';\n      try {\n        args.unshift(this);\n        if (typeof plugin == 'string') {\n          plugin_name = 'Sammy.' + plugin;\n          plugin = Sammy[plugin];\n        }\n        plugin.apply(this, args);\n      } catch(e) {\n        if (typeof plugin === 'undefined') {\n          this.error(\"Plugin Error: called use() but plugin (\" + plugin_name.toString() + \") is not defined\", e);\n        } else if (!_isFunction(plugin)) {\n          this.error(\"Plugin Error: called use() but '\" + plugin_name.toString() + \"' is not a function\", e);\n        } else {\n          this.error(\"Plugin Error\", e);\n        }\n      }\n      return this;\n    },\n\n    // Sets the location proxy for the current app. By default this is set to\n    // a new `Sammy.HashLocationProxy` on initialization. However, you can set\n    // the location_proxy inside you're app function to give your app a custom\n    // location mechanism. See `Sammy.HashLocationProxy` and `Sammy.DataLocationProxy`\n    // for examples.\n    //\n    // `setLocationProxy()` takes an initialized location proxy.\n    //\n    // ### Example\n    //\n    //        // to bind to data instead of the default hash;\n    //        var app = $.sammy(function() {\n    //          this.setLocationProxy(new Sammy.DataLocationProxy(this));\n    //        });\n    //\n    setLocationProxy: function(new_proxy) {\n      var original_proxy = this._location_proxy;\n      this._location_proxy = new_proxy;\n      if (this.isRunning()) {\n        if (original_proxy) {\n          // if there is already a location proxy, unbind it.\n          original_proxy.unbind();\n        }\n        this._location_proxy.bind();\n      }\n    },\n\n    // `route()` is the main method for defining routes within an application.\n    // For great detail on routes, check out: http://code.quirkey.com/sammy/doc/routes.html\n    //\n    // This method also has aliases for each of the different verbs (eg. `get()`, `post()`, etc.)\n    //\n    // ### Arguments\n    //\n    // * `verb` A String in the set of ROUTE_VERBS or 'any'. 'any' will add routes for each\n    //    of the ROUTE_VERBS. If only two arguments are passed,\n    //    the first argument is the path, the second is the callback and the verb\n    //    is assumed to be 'any'.\n    // * `path` A Regexp or a String representing the path to match to invoke this verb.\n    // * `callback` A Function that is called/evaluated whent the route is run see: `runRoute()`.\n    //    It is also possible to pass a string as the callback, which is looked up as the name\n    //    of a method on the application.\n    //\n    route: function(verb, path, callback) {\n      var app = this, param_names = [], add_route;\n\n      // if the method signature is just (path, callback)\n      // assume the verb is 'any'\n      if (!callback && _isFunction(path)) {\n        path = verb;\n        callback = path;\n        verb = 'any';\n      }\n\n      verb = verb.toLowerCase(); // ensure verb is lower case\n\n      // if path is a string turn it into a regex\n      if (path.constructor == String) {\n\n        // Needs to be explicitly set because IE will maintain the index unless NULL is returned,\n        // which means that with two consecutive routes that contain params, the second set of params will not be found and end up in splat instead of params\n        // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/RegExp/lastIndex\n        PATH_NAME_MATCHER.lastIndex = 0;\n\n        // find the names\n        while ((path_match = PATH_NAME_MATCHER.exec(path)) !== null) {\n          param_names.push(path_match[1]);\n        }\n        // replace with the path replacement\n        path = new RegExp(\"^\" + path.replace(PATH_NAME_MATCHER, PATH_REPLACER) + \"$\");\n      }\n      // lookup callback\n      if (typeof callback == 'string') {\n        callback = app[callback];\n      }\n\n      add_route = function(with_verb) {\n        var r = {verb: with_verb, path: path, callback: callback, param_names: param_names};\n        // add route to routes array\n        app.routes[with_verb] = app.routes[with_verb] || [];\n        // place routes in order of definition\n        app.routes[with_verb].push(r);\n      };\n\n      if (verb === 'any') {\n        $.each(this.ROUTE_VERBS, function(i, v) { add_route(v); });\n      } else {\n        add_route(verb);\n      }\n\n      // return the app\n      return this;\n    },\n\n    // Alias for route('get', ...)\n    get: _routeWrapper('get'),\n\n    // Alias for route('post', ...)\n    post: _routeWrapper('post'),\n\n    // Alias for route('put', ...)\n    put: _routeWrapper('put'),\n\n    // Alias for route('delete', ...)\n    del: _routeWrapper('delete'),\n\n    // Alias for route('any', ...)\n    any: _routeWrapper('any'),\n\n    // `mapRoutes` takes an array of arrays, each array being passed to route()\n    // as arguments, this allows for mass definition of routes. Another benefit is\n    // this makes it possible/easier to load routes via remote JSON.\n    //\n    // ### Example\n    //\n    //    var app = $.sammy(function() {\n    //\n    //      this.mapRoutes([\n    //          ['get', '#/', function() { this.log('index'); }],\n    //          // strings in callbacks are looked up as methods on the app\n    //          ['post', '#/create', 'addUser'],\n    //          // No verb assumes 'any' as the verb\n    //          [/dowhatever/, function() { this.log(this.verb, this.path)}];\n    //        ]);\n    //    })\n    //\n    mapRoutes: function(route_array) {\n      var app = this;\n      $.each(route_array, function(i, route_args) {\n        app.route.apply(app, route_args);\n      });\n      return this;\n    },\n\n    // A unique event namespace defined per application.\n    // All events bound with `bind()` are automatically bound within this space.\n    eventNamespace: function() {\n      return ['sammy-app', this.namespace].join('-');\n    },\n\n    // Works just like `jQuery.fn.bind()` with a couple noteable differences.\n    //\n    // * It binds all events to the application element\n    // * All events are bound within the `eventNamespace()`\n    // * Events are not actually bound until the application is started with `run()`\n    // * callbacks are evaluated within the context of a Sammy.EventContext\n    //\n    // See http://code.quirkey.com/sammy/docs/events.html for more info.\n    //\n    bind: function(name, data, callback) {\n      var app = this;\n      // build the callback\n      // if the arity is 2, callback is the second argument\n      if (typeof callback == 'undefined') { callback = data; }\n      var listener_callback =  function() {\n        // pull off the context from the arguments to the callback\n        var e, context, data;\n        e       = arguments[0];\n        data    = arguments[1];\n        if (data && data.context) {\n          context = data.context;\n          delete data.context;\n        } else {\n          context = new app.context_prototype(app, 'bind', e.type, data, e.target);\n        }\n        e.cleaned_type = e.type.replace(app.eventNamespace(), '');\n        callback.apply(context, [e, data]);\n      };\n\n      // it could be that the app element doesnt exist yet\n      // so attach to the listeners array and then run()\n      // will actually bind the event.\n      if (!this.listeners[name]) { this.listeners[name] = []; }\n      this.listeners[name].push(listener_callback);\n      if (this.isRunning()) {\n        // if the app is running\n        // *actually* bind the event to the app element\n        this._listen(name, listener_callback);\n      }\n      return this;\n    },\n\n    // Triggers custom events defined with `bind()`\n    //\n    // ### Arguments\n    //\n    // * `name` The name of the event. Automatically prefixed with the `eventNamespace()`\n    // * `data` An optional Object that can be passed to the bound callback.\n    // * `context` An optional context/Object in which to execute the bound callback.\n    //   If no context is supplied a the context is a new `Sammy.EventContext`\n    //\n    trigger: function(name, data) {\n      this.$element().trigger([name, this.eventNamespace()].join('.'), [data]);\n      return this;\n    },\n\n    // Reruns the current route\n    refresh: function() {\n      this.last_location = null;\n      this.trigger('location-changed');\n      return this;\n    },\n\n    // Takes a single callback that is pushed on to a stack.\n    // Before any route is run, the callbacks are evaluated in order within\n    // the current `Sammy.EventContext`\n    //\n    // If any of the callbacks explicitly return false, execution of any\n    // further callbacks and the route itself is halted.\n    //\n    // You can also provide a set of options that will define when to run this\n    // before based on the route it proceeds.\n    //\n    // ### Example\n    //\n    //      var app = $.sammy(function() {\n    //\n    //        // will run at #/route but not at #/\n    //        this.before('#/route', function() {\n    //          //...\n    //        });\n    //\n    //        // will run at #/ but not at #/route\n    //        this.before({except: {path: '#/route'}}, function() {\n    //          this.log('not before #/route');\n    //        });\n    //\n    //        this.get('#/', function() {});\n    //\n    //        this.get('#/route', function() {});\n    //\n    //      });\n    //\n    // See `contextMatchesOptions()` for a full list of supported options\n    //\n    before: function(options, callback) {\n      if (_isFunction(options)) {\n        callback = options;\n        options = {};\n      }\n      this.befores.push([options, callback]);\n      return this;\n    },\n\n    // A shortcut for binding a callback to be run after a route is executed.\n    // After callbacks have no guarunteed order.\n    after: function(callback) {\n      return this.bind('event-context-after', callback);\n    },\n\n\n    // Adds an around filter to the application. around filters are functions\n    // that take a single argument `callback` which is the entire route\n    // execution path wrapped up in a closure. This means you can decide whether\n    // or not to proceed with execution by not invoking `callback` or,\n    // more usefuly wrapping callback inside the result of an asynchronous execution.\n    //\n    // ### Example\n    //\n    // The most common use case for around() is calling a _possibly_ async function\n    // and executing the route within the functions callback:\n    //\n    //      var app = $.sammy(function() {\n    //\n    //        var current_user = false;\n    //\n    //        function checkLoggedIn(callback) {\n    //          // /session returns a JSON representation of the logged in user\n    //          // or an empty object\n    //          if (!current_user) {\n    //            $.getJSON('/session', function(json) {\n    //              if (json.login) {\n    //                // show the user as logged in\n    //                current_user = json;\n    //                // execute the route path\n    //                callback();\n    //              } else {\n    //                // show the user as not logged in\n    //                current_user = false;\n    //                // the context of aroundFilters is an EventContext\n    //                this.redirect('#/login');\n    //              }\n    //            });\n    //          } else {\n    //            // execute the route path\n    //            callback();\n    //          }\n    //        };\n    //\n    //        this.around(checkLoggedIn);\n    //\n    //      });\n    //\n    around: function(callback) {\n      this.arounds.push(callback);\n      return this;\n    },\n\n    // Returns `true` if the current application is running.\n    isRunning: function() {\n      return this._running;\n    },\n\n    // Helpers extends the EventContext prototype specific to this app.\n    // This allows you to define app specific helper functions that can be used\n    // whenever you're inside of an event context (templates, routes, bind).\n    //\n    // ### Example\n    //\n    //    var app = $.sammy(function() {\n    //\n    //      helpers({\n    //        upcase: function(text) {\n    //         return text.toString().toUpperCase();\n    //        }\n    //      });\n    //\n    //      get('#/', function() { with(this) {\n    //        // inside of this context I can use the helpers\n    //        $('#main').html(upcase($('#main').text());\n    //      }});\n    //\n    //    });\n    //\n    //\n    // ### Arguments\n    //\n    // * `extensions` An object collection of functions to extend the context.\n    //\n    helpers: function(extensions) {\n      $.extend(this.context_prototype.prototype, extensions);\n      return this;\n    },\n\n    // Helper extends the event context just like `helpers()` but does it\n    // a single method at a time. This is especially useful for dynamically named\n    // helpers\n    //\n    // ### Example\n    //\n    //     // Trivial example that adds 3 helper methods to the context dynamically\n    //     var app = $.sammy(function(app) {\n    //\n    //       $.each([1,2,3], function(i, num) {\n    //         app.helper('helper' + num, function() {\n    //           this.log(\"I'm helper number \" + num);\n    //         });\n    //       });\n    //\n    //       this.get('#/', function() {\n    //         this.helper2(); //=> I'm helper number 2\n    //       });\n    //     });\n    //\n    // ### Arguments\n    //\n    // * `name` The name of the method\n    // * `method` The function to be added to the prototype at `name`\n    //\n    helper: function(name, method) {\n      this.context_prototype.prototype[name] = method;\n      return this;\n    },\n\n    // Actually starts the application's lifecycle. `run()` should be invoked\n    // within a document.ready block to ensure the DOM exists before binding events, etc.\n    //\n    // ### Example\n    //\n    //    var app = $.sammy(function() { ... }); // your application\n    //    $(function() { // document.ready\n    //        app.run();\n    //     });\n    //\n    // ### Arguments\n    //\n    // * `start_url` Optionally, a String can be passed which the App will redirect to\n    //   after the events/routes have been bound.\n    run: function(start_url) {\n      if (this.isRunning()) { return false; }\n      var app = this;\n\n      // actually bind all the listeners\n      $.each(this.listeners.toHash(), function(name, callbacks) {\n        $.each(callbacks, function(i, listener_callback) {\n          app._listen(name, listener_callback);\n        });\n      });\n\n      this.trigger('run', {start_url: start_url});\n      this._running = true;\n      // set last location\n      this.last_location = null;\n      if (this.getLocation() == '' && typeof start_url != 'undefined') {\n        this.setLocation(start_url);\n      }\n      // check url\n      this._checkLocation();\n      this._location_proxy.bind();\n      this.bind('location-changed', function() {\n        app._checkLocation();\n      });\n\n      // bind to submit to capture post/put/delete routes\n      this.bind('submit', function(e) {\n        var returned = app._checkFormSubmission($(e.target).closest('form'));\n        return (returned === false) ? e.preventDefault() : false;\n      });\n\n      // bind unload to body unload\n      $(window).bind('beforeunload', function() {\n        app.unload();\n      });\n\n      // trigger html changed\n      return this.trigger('changed');\n    },\n\n    // The opposite of `run()`, un-binds all event listeners and intervals\n    // `run()` Automaticaly binds a `onunload` event to run this when\n    // the document is closed.\n    unload: function() {\n      if (!this.isRunning()) { return false; }\n      var app = this;\n      this.trigger('unload');\n      // clear interval\n      this._location_proxy.unbind();\n      // unbind form submits\n      this.$element().unbind('submit').removeClass(app.eventNamespace());\n      // unbind all events\n      $.each(this.listeners.toHash() , function(name, listeners) {\n        $.each(listeners, function(i, listener_callback) {\n          app._unlisten(name, listener_callback);\n        });\n      });\n      this._running = false;\n      return this;\n    },\n\n    // Will bind a single callback function to every event that is already\n    // being listened to in the app. This includes all the `APP_EVENTS`\n    // as well as any custom events defined with `bind()`.\n    //\n    // Used internally for debug logging.\n    bindToAllEvents: function(callback) {\n      var app = this;\n      // bind to the APP_EVENTS first\n      $.each(this.APP_EVENTS, function(i, e) {\n        app.bind(e, callback);\n      });\n      // next, bind to listener names (only if they dont exist in APP_EVENTS)\n      $.each(this.listeners.keys(true), function(i, name) {\n        if (app.APP_EVENTS.indexOf(name) == -1) {\n          app.bind(name, callback);\n        }\n      });\n      return this;\n    },\n\n    // Returns a copy of the given path with any query string after the hash\n    // removed.\n    routablePath: function(path) {\n      return path.replace(QUERY_STRING_MATCHER, '');\n    },\n\n    // Given a verb and a String path, will return either a route object or false\n    // if a matching route can be found within the current defined set.\n    lookupRoute: function(verb, path) {\n      var app = this, routed = false;\n      this.trigger('lookup-route', {verb: verb, path: path});\n      if (typeof this.routes[verb] != 'undefined') {\n        $.each(this.routes[verb], function(i, route) {\n          if (app.routablePath(path).match(route.path)) {\n            routed = route;\n            route._path = path;\n            return false;\n          }\n        });\n        // Also check against the base path\n        $.each(this.routes[verb], function(i, route) {\n          if (app.routablePath(window.location.pathname).match(route.path)) {\n            routed = route;\n            route._path = window.location.pathname;\n            return false;\n          }\n        });\n      }\n      return routed;\n    },\n\n    // First, invokes `lookupRoute()` and if a route is found, parses the\n    // possible URL params and then invokes the route's callback within a new\n    // `Sammy.EventContext`. If the route can not be found, it calls\n    // `notFound()`. If `raise_errors` is set to `true` and\n    // the `error()` has not been overriden, it will throw an actual JS\n    // error.\n    //\n    // You probably will never have to call this directly.\n    //\n    // ### Arguments\n    //\n    // * `verb` A String for the verb.\n    // * `path` A String path to lookup.\n    // * `params` An Object of Params pulled from the URI or passed directly.\n    //\n    // ### Returns\n    //\n    // Either returns the value returned by the route callback or raises a 404 Not Found error.\n    //\n    runRoute: function(verb, path, params, target) {\n      var app = this,\n          route = this.lookupRoute(verb, path),\n          context,\n          wrapped_route,\n          arounds,\n          around,\n          befores,\n          before,\n          callback_args,\n          final_returned;\n\n      this.log('runRoute', [verb, path].join(' '));\n      this.trigger('run-route', {verb: verb, path: path, params: params});\n      if (typeof params == 'undefined') { params = {}; }\n      $.extend(params, this._parseQueryString(path));\n      \n      if (route) {\n        this.trigger('route-found', {route: route});\n        // pull out the params from the path\n        if ((path_params = route.path.exec(this.routablePath(route._path))) !== null) {\n          // first match is the full path\n          path_params.shift();\n          // for each of the matches\n          $.each(path_params, function(i, param) {\n            // if theres a matching param name\n            if (route.param_names[i]) {\n              // set the name to the match\n              params[route.param_names[i]] = _decode(param);\n            } else {\n              // initialize 'splat'\n              if (!params.splat) { params.splat = []; }\n              params.splat.push(_decode(param));\n            }\n          });\n        }\n\n        // set event context\n        context  = new this.context_prototype(this, verb, path, params, target);\n        // ensure arrays\n        arounds = this.arounds.slice(0);\n        befores = this.befores.slice(0);\n        // set the callback args to the context + contents of the splat\n        callback_args = [context].concat(params.splat);\n        // wrap the route up with the before filters\n        wrapped_route = function() {\n          var returned;\n          while (befores.length > 0) {\n            before = befores.shift();\n            // check the options\n            if (app.contextMatchesOptions(context, before[0])) {\n              returned = before[1].apply(context, [context]);\n              if (returned === false) { return false; }\n            }\n          }\n          app.last_route = route;\n          context.trigger('event-context-before', {context: context});\n          returned = route.callback.apply(context, callback_args);\n          context.trigger('event-context-after', {context: context});\n          return returned;\n        };\n        $.each(arounds.reverse(), function(i, around) {\n          var last_wrapped_route = wrapped_route;\n          wrapped_route = function() { return around.apply(context, [last_wrapped_route]); };\n        });\n        try {\n          final_returned = wrapped_route();\n        } catch(e) {\n          this.error(['500 Error', verb, path].join(' '), e);\n        }\n        return final_returned;\n      } else {\n        return this.notFound(verb, path);\n      }\n    },\n\n    // Matches an object of options against an `EventContext` like object that\n    // contains `path` and `verb` attributes. Internally Sammy uses this\n    // for matching `before()` filters against specific options. You can set the\n    // object to _only_ match certain paths or verbs, or match all paths or verbs _except_\n    // those that match the options.\n    //\n    // ### Example\n    //\n    //     var app = $.sammy(),\n    //         context = {verb: 'get', path: '#/mypath'};\n    //\n    //     // match against a path string\n    //     app.contextMatchesOptions(context, '#/mypath'); //=> true\n    //     app.contextMatchesOptions(context, '#/otherpath'); //=> false\n    //     // equivilent to\n    //     app.contextMatchesOptions(context, {only: {path:'#/mypath'}}); //=> true\n    //     app.contextMatchesOptions(context, {only: {path:'#/otherpath'}}); //=> false\n    //     // match against a path regexp\n    //     app.contextMatchesOptions(context, /path/); //=> true\n    //     app.contextMatchesOptions(context, /^path/); //=> false\n    //     // match only a verb\n    //     app.contextMatchesOptions(context, {only: {verb:'get'}}); //=> true\n    //     app.contextMatchesOptions(context, {only: {verb:'post'}}); //=> false\n    //     // match all except a verb\n    //     app.contextMatchesOptions(context, {except: {verb:'post'}}); //=> true\n    //     app.contextMatchesOptions(context, {except: {verb:'get'}}); //=> false\n    //     // match all except a path\n    //     app.contextMatchesOptions(context, {except: {path:'#/otherpath'}}); //=> true\n    //     app.contextMatchesOptions(context, {except: {path:'#/mypath'}}); //=> false\n    //\n    contextMatchesOptions: function(context, match_options, positive) {\n      // empty options always match\n      var options = match_options;\n      if (typeof options === 'undefined' || options == {}) {\n        return true;\n      }\n      if (typeof positive === 'undefined') {\n        positive = true;\n      }\n      // normalize options\n      if (typeof options === 'string' || _isFunction(options.test)) {\n        options = {path: options};\n      }\n      if (options.only) {\n        return this.contextMatchesOptions(context, options.only, true);\n      } else if (options.except) {\n        return this.contextMatchesOptions(context, options.except, false);\n      }\n      var path_matched = true, verb_matched = true;\n      if (options.path) {\n        // wierd regexp test\n        if (_isFunction(options.path.test)) {\n          path_matched = options.path.test(context.path);\n        } else {\n          path_matched = (options.path.toString() === context.path);\n        }\n      }\n      if (options.verb) {\n        verb_matched = options.verb === context.verb;\n      }\n      return positive ? (verb_matched && path_matched) : !(verb_matched && path_matched);\n    },\n\n\n    // Delegates to the `location_proxy` to get the current location.\n    // See `Sammy.HashLocationProxy` for more info on location proxies.\n    getLocation: function() {\n      return this._location_proxy.getLocation();\n    },\n\n    // Delegates to the `location_proxy` to set the current location.\n    // See `Sammy.HashLocationProxy` for more info on location proxies.\n    //\n    // ### Arguments\n    //\n    // * `new_location` A new location string (e.g. '#/')\n    //\n    setLocation: function(new_location) {\n      return this._location_proxy.setLocation(new_location);\n    },\n\n    // Swaps the content of `$element()` with `content`\n    // You can override this method to provide an alternate swap behavior\n    // for `EventContext.partial()`.\n    //\n    // ### Example\n    //\n    //    var app = $.sammy(function() {\n    //\n    //      // implements a 'fade out'/'fade in'\n    //      this.swap = function(content) {\n    //        this.$element().hide('slow').html(content).show('slow');\n    //      }\n    //\n    //      get('#/', function() {\n    //        this.partial('index.html.erb') // will fade out and in\n    //      });\n    //\n    //    });\n    //\n    swap: function(content) {\n      return this.$element().html(content);\n    },\n\n    // a simple global cache for templates. Uses the same semantics as\n    // `Sammy.Cache` and `Sammy.Storage` so can easily be replaced with\n    // a persistant storage that lasts beyond the current request.\n    templateCache: function(key, value) {\n      if (typeof value != 'undefined') {\n        return _template_cache[key] = value;\n      } else {\n        return _template_cache[key];\n      }\n    },\n\n    // This thows a '404 Not Found' error by invoking `error()`.\n    // Override this method or `error()` to provide custom\n    // 404 behavior (i.e redirecting to / or showing a warning)\n    notFound: function(verb, path) {\n      var ret = this.error(['404 Not Found', verb, path].join(' '));\n      return (verb === 'get') ? ret : true;\n    },\n\n    // The base error handler takes a string `message` and an `Error`\n    // object. If `raise_errors` is set to `true` on the app level,\n    // this will re-throw the error to the browser. Otherwise it will send the error\n    // to `log()`. Override this method to provide custom error handling\n    // e.g logging to a server side component or displaying some feedback to the\n    // user.\n    error: function(message, original_error) {\n      if (!original_error) { original_error = new Error(); }\n      original_error.message = [message, original_error.message].join(' ');\n      this.trigger('error', {message: original_error.message, error: original_error});\n      if (this.raise_errors) {\n        throw(original_error);\n      } else {\n        this.log(original_error.message, original_error);\n      }\n    },\n\n    _checkLocation: function() {\n      var location, returned;\n      // get current location\n      location = this.getLocation();\n      // compare to see if hash has changed\n      if (location != this.last_location) {\n        // reset last location\n        this.last_location = location;\n        // lookup route for current hash\n        returned = this.runRoute('get', location);\n      }\n      return returned;\n    },\n\n    _getFormVerb: function(form) {\n      var $form = $(form), verb;\n      $_method = $form.find('input[name=\"_method\"]');\n      if ($_method.length > 0) { verb = $_method.val(); }\n      if (!verb) { verb = $form[0].getAttribute('method'); }\n      return $.trim(verb.toString().toLowerCase());\n    },\n\n    _checkFormSubmission: function(form) {\n      var $form, path, verb, params, returned;\n      this.trigger('check-form-submission', {form: form});\n      $form = $(form);\n      path  = $form.attr('action');\n      verb  = this._getFormVerb($form);\n      if (!verb || verb == '') { verb = 'get'; }\n      this.log('_checkFormSubmission', $form, path, verb);\n      if (verb === 'get') {\n        this.setLocation(path + '?' + $form.serialize());\n        returned = false;\n      } else {\n        params = $.extend({}, this._parseFormParams($form));\n        returned = this.runRoute(verb, path, params, form.get(0));\n      };\n      return (typeof returned == 'undefined') ? false : returned;\n    },\n\n    _parseFormParams: function($form) {\n      var params = {},\n          form_fields = $form.serializeArray(),\n          i;\n      for (i = 0; i < form_fields.length; i++) {\n        params = this._parseParamPair(params, form_fields[i].name, form_fields[i].value);\n      }\n      return params;\n    },\n\n    _parseQueryString: function(path) {\n      var params = {}, parts, pairs, pair, i;\n\n      parts = path.match(QUERY_STRING_MATCHER);\n      if (parts) {\n        pairs = parts[1].split('&');\n        for (i = 0; i < pairs.length; i++) {\n          pair = pairs[i].split('=');\n          params = this._parseParamPair(params, _decode(pair[0]), _decode(pair[1]));\n        }\n      }\n      return params;\n    },\n\n    _parseParamPair: function(params, key, value) {\n      if (params[key]) {\n        if (_isArray(params[key])) {\n          params[key].push(value);\n        } else {\n          params[key] = [params[key], value];\n        }\n      } else {\n        params[key] = value;\n      }\n      return params;\n    },\n\n    _listen: function(name, callback) {\n      return this.$element().bind([name, this.eventNamespace()].join('.'), callback);\n    },\n\n    _unlisten: function(name, callback) {\n      return this.$element().unbind([name, this.eventNamespace()].join('.'), callback);\n    }\n\n  });\n\n  // `Sammy.RenderContext` is an object that makes sequential template loading,\n  // rendering and interpolation seamless even when dealing with asyncronous\n  // operations.\n  //\n  // `RenderContext` objects are not usually created directly, rather they are\n  // instatiated from an `Sammy.EventContext` by using `render()`, `load()` or\n  // `partial()` which all return `RenderContext` objects.\n  //\n  // `RenderContext` methods always returns a modified `RenderContext`\n  // for chaining (like jQuery itself).\n  //\n  // The core magic is in the `then()` method which puts the callback passed as\n  // an argument into a queue to be executed once the previous callback is complete.\n  // All the methods of `RenderContext` are wrapped in `then()` which allows you\n  // to queue up methods by chaining, but maintaing a guarunteed execution order\n  // even with remote calls to fetch templates.\n  //\n  Sammy.RenderContext = function(event_context) {\n    this.event_context    = event_context;\n    this.callbacks        = [];\n    this.previous_content = null;\n    this.content          = null;\n    this.next_engine      = false;\n    this.waiting          = false;\n  };\n\n  $.extend(Sammy.RenderContext.prototype, {\n\n    // The \"core\" of the `RenderContext` object, adds the `callback` to the\n    // queue. If the context is `waiting` (meaning an async operation is happening)\n    // then the callback will be executed in order, once the other operations are\n    // complete. If there is no currently executing operation, the `callback`\n    // is executed immediately.\n    //\n    // The value returned from the callback is stored in `content` for the\n    // subsiquent operation. If you return `false`, the queue will pause, and\n    // the next callback in the queue will not be executed until `next()` is\n    // called. This allows for the guarunteed order of execution while working\n    // with async operations.\n    //\n    // ### Example\n    //\n    //      this.get('#/', function() {\n    //        // initialize the RenderContext\n    //        // Even though `load()` executes async, the next `then()`\n    //        // wont execute until the load finishes\n    //        this.load('myfile.txt')\n    //            .then(function(content) {\n    //              // the first argument to then is the content of the\n    //              // prev operation\n    //              $('#main').html(content);\n    //            });\n    //      });\n    //\n    then: function(callback) {\n      if (_isFunction(callback)) {\n        var context = this;\n        if (this.waiting) {\n          this.callbacks.push(callback);\n        } else {\n          this.wait();\n          setTimeout(function() {\n            var returned = callback.apply(context, [context.content, context.previous_content]);\n            if (returned !== false) {\n              context.next(returned);\n            }\n          }, 13);\n        }\n      }\n      return this;\n    },\n\n    // Pause the `RenderContext` queue. Combined with `next()` allows for async\n    // operations.\n    //\n    // ### Example\n    //\n    //        this.get('#/', function() {\n    //          this.load('mytext.json')\n    //              .then(function(content) {\n    //                var context = this,\n    //                    data    = JSON.parse(content);\n    //                // pause execution\n    //                context.wait();\n    //                // post to a url\n    //                $.post(data.url, {}, function(response) {\n    //                  context.next(JSON.parse(response));\n    //                });\n    //              })\n    //              .then(function(data) {\n    //                // data is json from the previous post\n    //                $('#message').text(data.status);\n    //              });\n    //        });\n    wait: function() {\n      this.waiting = true;\n    },\n\n    // Resume the queue, setting `content` to be used in the next operation.\n    // See `wait()` for an example.\n    next: function(content) {\n      this.waiting = false;\n      if (typeof content !== 'undefined') {\n        this.previous_content = this.content;\n        this.content = content;\n      }\n      if (this.callbacks.length > 0) {\n        this.then(this.callbacks.shift());\n      }\n    },\n\n    // Load a template into the context.\n    // The `location` can either be a string specifiying the remote path to the\n    // file, a jQuery object, or a DOM element.\n    //\n    // No interpolation happens by default, the content is stored in\n    // `content`.\n    //\n    // In the case of a path, unless the option `{cache: false}` is passed the\n    // data is stored in the app's `templateCache()`.\n    //\n    // If a jQuery or DOM object is passed the `innerHTML` of the node is pulled in.\n    // This is useful for nesting templates as part of the initial page load wrapped\n    // in invisible elements or `<script>` tags. With template paths, the template\n    // engine is looked up by the extension. For DOM/jQuery embedded templates,\n    // this isnt possible, so there are a couple of options:\n    //\n    //  * pass an `{engine:}` option.\n    //  * define the engine in the `data-engine` attribute of the passed node.\n    //  * just store the raw template data and use `interpolate()` manually\n    //\n    // If a `callback` is passed it is executed after the template load.\n    load: function(location, options, callback) {\n      var context = this;\n      return this.then(function() {\n        var should_cache, cached;\n        if (_isFunction(options)) {\n          callback = options;\n          options = {};\n        } else {\n          options = $.extend({}, options);\n        }\n        if (callback) { this.then(callback); }\n        if (typeof location === 'string') {\n          // its a path\n          should_cache = !(options.cache === false);\n          delete options.cache;\n          if (options.engine) {\n            context.next_engine = options.engine;\n            delete options.engine;\n          }\n          if (should_cache && (cached = this.event_context.app.templateCache(location))) {\n            return cached;\n          }\n          this.wait();\n          $.ajax($.extend({\n            url: location,\n            data: {},\n            type: 'get',\n            success: function(data) {\n              if (should_cache) {\n                context.event_context.app.templateCache(location, data);\n              }\n              context.next(data);\n            }\n          }, options));\n          return false;\n        } else {\n          // its a dom/jQuery\n          if (location.nodeType) {\n            return location.innerHTML;\n          }\n          if (location.selector) {\n            // its a jQuery\n            context.next_engine = location.attr('data-engine');\n            if (options.clone === false) {\n              return location.remove()[0].innerHTML.toString();\n            } else {\n              return location[0].innerHTML.toString();\n            }\n          }\n        }\n      });\n    },\n\n    // `load()` a template and then `interpolate()` it with data.\n    //\n    // ### Example\n    //\n    //      this.get('#/', function() {\n    //        this.render('mytemplate.template', {name: 'test'});\n    //      });\n    //\n    render: function(location, data, callback) {\n      if (_isFunction(location) && !data) {\n        return this.then(location);\n      } else {\n        return this.load(location).interpolate(data, location).then(callback);\n      }\n    },\n\n    // itterates over an array, applying the callback for each item item. the\n    // callback takes the same style of arguments as `jQuery.each()` (index, item).\n    // The return value of each callback is collected as a single string and stored\n    // as `content` to be used in the next iteration of the `RenderContext`.\n    collect: function(array, callback) {\n      var context = this;\n      return this.then(function() {\n        var contents = \"\";\n        $.each(array, function(i, item) {\n          var returned = callback.apply(context, [i, item]);\n          contents += returned;\n          return returned;\n        });\n        return contents;\n      });\n    },\n\n    // loads a template, and then interpolates it for each item in the `data`\n    // array.\n    renderEach: function(location, name, data, callback) {\n      if (_isArray(name)) {\n        callback = data;\n        data = name;\n        name = null;\n      }\n      if (!data && _isArray(this.content)) {\n        data = this.content;\n      }\n      return this.load(location).collect(data, function(i, value) {\n        var idata = {};\n        name ? (idata[name] = value) : (idata = value);\n        return this.event_context.interpolate(this.content, idata, location);\n      });\n    },\n\n    // uses the previous loaded `content` and the `data` object to interpolate\n    // a template. `engine` defines the templating/interpolation method/engine\n    // that should be used. If `engine` is not passed, the `next_engine` is\n    // used. If `retain` is `true`, the final interpolated data is appended to\n    // the `previous_content` instead of just replacing it.\n    interpolate: function(data, engine, retain) {\n      var context = this;\n      return this.then(function(content, prev) {\n        if (this.next_engine) {\n          engine = this.next_engine;\n          this.next_engine = false;\n        }\n        var rendered = context.event_context.interpolate(content, data, engine);\n        return retain ? prev + rendered : rendered;\n      });\n    },\n\n    // executes `EventContext#swap()` with the `content`\n    swap: function() {\n      return this.then(function(content) {\n        this.event_context.swap(content);\n      }).trigger('changed', {});\n    },\n\n    // Same usage as `jQuery.fn.appendTo()` but uses `then()` to ensure order\n    appendTo: function(selector) {\n      return this.then(function(content) {\n        $(selector).append(content);\n      }).trigger('changed', {});\n    },\n\n    // Same usage as `jQuery.fn.prependTo()` but uses `then()` to ensure order\n    prependTo: function(selector) {\n      return this.then(function(content) {\n        $(selector).prepend(content);\n      }).trigger('changed', {});\n    },\n\n    // Replaces the `$(selector)` using `html()` with the previously loaded\n    // `content`\n    replace: function(selector) {\n      return this.then(function(content) {\n        $(selector).html(content);\n      }).trigger('changed', {});\n    },\n\n    // trigger the event in the order of the event context. Same semantics\n    // as `Sammy.EventContext#trigger()`. If data is ommitted, `content`\n    // is sent as `{content: content}`\n    trigger: function(name, data) {\n      return this.then(function(content) {\n        if (typeof data == 'undefined') { data = {content: content}; }\n        this.event_context.trigger(name, data);\n      });\n    }\n\n  });\n\n  // `Sammy.EventContext` objects are created every time a route is run or a\n  // bound event is triggered. The callbacks for these events are evaluated within a `Sammy.EventContext`\n  // This within these callbacks the special methods of `EventContext` are available.\n  //\n  // ### Example\n  //\n  //  $.sammy(function() {\n  //    // The context here is this Sammy.Application\n  //    this.get('#/:name', function() {\n  //      // The context here is a new Sammy.EventContext\n  //      if (this.params['name'] == 'sammy') {\n  //        this.partial('name.html.erb', {name: 'Sammy'});\n  //      } else {\n  //        this.redirect('#/somewhere-else')\n  //      }\n  //    });\n  //  });\n  //\n  // Initialize a new EventContext\n  //\n  // ### Arguments\n  //\n  // * `app` The `Sammy.Application` this event is called within.\n  // * `verb` The verb invoked to run this context/route.\n  // * `path` The string path invoked to run this context/route.\n  // * `params` An Object of optional params to pass to the context. Is converted\n  //   to a `Sammy.Object`.\n  // * `target` a DOM element that the event that holds this context originates\n  //   from. For post, put and del routes, this is the form element that triggered\n  //   the route.\n  //\n  Sammy.EventContext = function(app, verb, path, params, target) {\n    this.app    = app;\n    this.verb   = verb;\n    this.path   = path;\n    this.params = new Sammy.Object(params);\n    this.target = target;\n  };\n\n  Sammy.EventContext.prototype = $.extend({}, Sammy.Object.prototype, {\n\n    // A shortcut to the app's `$element()`\n    $element: function() {\n      return this.app.$element();\n    },\n\n    // Look up a templating engine within the current app and context.\n    // `engine` can be one of the following:\n    //\n    // * a function: should conform to `function(content, data) { return interploated; }`\n    // * a template path: 'template.ejs', looks up the extension to match to\n    //   the `ejs()` helper\n    // * a string referering to the helper: \"mustache\" => `mustache()`\n    //\n    // If no engine is found, use the app's default `template_engine`\n    //\n    engineFor: function(engine) {\n      var context = this, engine_match;\n      // if path is actually an engine function just return it\n      if (_isFunction(engine)) { return engine; }\n      // lookup engine name by path extension\n      engine = engine.toString();\n      if ((engine_match = engine.match(/\\.([^\\.]+)$/))) {\n        engine = engine_match[1];\n      }\n      // set the engine to the default template engine if no match is found\n      if (engine && _isFunction(context[engine])) {\n        return context[engine];\n      }\n      if (context.app.template_engine) {\n        return this.engineFor(context.app.template_engine);\n      }\n      return function(content, data) { return content; };\n    },\n\n    // using the template `engine` found with `engineFor()`, interpolate the\n    // `data` into `content`\n    interpolate: function(content, data, engine) {\n      return this.engineFor(engine).apply(this, [content, data]);\n    },\n\n    // Create and return a `Sammy.RenderContext` calling `render()` on it.\n    // Loads the template and interpolate the data, however does not actual\n    // place it in the DOM.\n    //\n    // ### Example\n    //\n    //      // mytemplate.mustache <div class=\"name\">{{name}}</div>\n    //      render('mytemplate.mustache', {name: 'quirkey'});\n    //      // sets the `content` to <div class=\"name\">quirkey</div>\n    //      render('mytemplate.mustache', {name: 'quirkey'})\n    //        .appendTo('ul');\n    //      // appends the rendered content to $('ul')\n    //\n    render: function(location, data, callback) {\n      return new Sammy.RenderContext(this).render(location, data, callback);\n    },\n\n    // create a new `Sammy.RenderContext` calling `load()` with `location` and\n    // `options`. Called without interpolation or placement, this allows for\n    // preloading/caching the templates.\n    load: function(location, options, callback) {\n      return new Sammy.RenderContext(this).load(location, options, callback);\n    },\n\n    // `render()` the the `location` with `data` and then `swap()` the\n    // app's `$element` with the rendered content.\n    partial: function(location, data) {\n      return this.render(location, data).swap();\n    },\n\n    // Changes the location of the current window. If `to` begins with\n    // '#' it only changes the document's hash. If passed more than 1 argument\n    // redirect will join them together with forward slashes.\n    //\n    // ### Example\n    //\n    //      redirect('#/other/route');\n    //      // equivilent to\n    //      redirect('#', 'other', 'route');\n    //\n    redirect: function() {\n      var to, args = _makeArray(arguments),\n          current_location = this.app.getLocation();\n      if (args.length > 1) {\n        args.unshift('/');\n        to = this.join.apply(this, args);\n      } else {\n        to = args[0];\n      }\n      this.trigger('redirect', {to: to});\n      this.app.last_location = this.path;\n      this.app.setLocation(to);\n      if (current_location == to) {\n        this.app.trigger('location-changed');\n      }\n    },\n\n    // Triggers events on `app` within the current context.\n    trigger: function(name, data) {\n      if (typeof data == 'undefined') { data = {}; }\n      if (!data.context) { data.context = this; }\n      return this.app.trigger(name, data);\n    },\n\n    // A shortcut to app's `eventNamespace()`\n    eventNamespace: function() {\n      return this.app.eventNamespace();\n    },\n\n    // A shortcut to app's `swap()`\n    swap: function(contents) {\n      return this.app.swap(contents);\n    },\n\n    // Raises a possible `notFound()` error for the current path.\n    notFound: function() {\n      return this.app.notFound(this.verb, this.path);\n    },\n\n    // //=> Sammy.EventContext: get #/ {}\n    toString: function() {\n      return \"Sammy.EventContext: \" + [this.verb, this.path, this.params].join(' ');\n    }\n\n  });\n\n  // An alias to Sammy\n  $.sammy = window.Sammy = Sammy;\n\n})(jQuery);\n"}