{"/home/travis/build/npmtest/node-npmtest-couchapp/test.js":"/* istanbul instrument in package npmtest_couchapp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-couchapp/lib.npmtest_couchapp.js":"/* istanbul instrument in package npmtest_couchapp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_couchapp = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_couchapp = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-couchapp/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-couchapp && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_couchapp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_couchapp\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_couchapp.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_couchapp.rollup.js'] =\n            local.assetsDict['/assets.npmtest_couchapp.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_couchapp.__dirname +\n                    '/lib.npmtest_couchapp.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-couchapp/node_modules/couchapp/main.js":"var path = require('path')\n  , fs = require('fs')\n  , watch = require('watch')\n  , request = require('request')\n  , crypto = require('crypto')\n  , mimetypes = require('./mimetypes')\n  , spawn = require('child_process').spawn\n  ;\n\nvar h = {'content-type':'application/json', 'accept-type':'application/json'}\n  \n/**\n * Recursively load directory contents into ddoc\n *\n * It's really convenient to see the main couchapp code in single file,\n * rather than mapped into little files in lots of directories like\n * the python couchapp. But there are definitely cases where we might want \n * to use some module or another on the server side. This addition\n * loads file contents from a given directory (recursively) into a js \n * object that can be added to a design document and require()'d in \n * lists, shows, etc. \n *\n * Use couchapp.loadFiles() in app.js like this:\n *\n *    ddoc = {\n *        _id: '_design/app'\n *      , views: {}\n *      , ...\n *      , lib: couchapp.loadFiles('./lib')\n *      , vendor: couchapp.loadFiles('./vendor')\n *    }\n *\n * Optionally, pass in operators to process file contents. For example, \n * generate mustache templates from jade templates.\n *\n * In yourapp/templates/index.jade\n *  \n * !!!5\n * html\n *   head\n *     //- jade locals.title\n *     title!= title\n *   body\n *     .item\n *       //- mustache variable for server-side rendering\n *       h1 {{ heading }}\n *\n * in yourapp/app.js\n * var couchapp = require('couchapp')\n *   , jade = require('jade')\n *   , options = {\n *       , operators: [\n *           function renderJade (content, options) {\n *             var compiler = jade.compile(content);\n *             return compiler(options.locals || {});\n *           }\n *         ]\n *       , locals: { title: 'Now we\\'re cookin with gas!' }\n *   };\n *\n * ddoc = { ... };\n * \n * ddoc.templates = loadFiles(dir, options);\n */\n\nfunction loadFiles(dir, options) {\n  var listings = fs.readdirSync(dir)\n    , options = options || {}\n    , obj = {};\n\n  listings.forEach(function (listing) {\n    var file = path.join(dir, listing)\n      , prop = listing.split('.')[0] // probably want regexp or something more robust\n      , stat = fs.statSync(file);\n\n      if (stat.isFile()) { \n        var content = fs.readFileSync(file).toString();\n        if (options.operators) {\n          options.operators.forEach(function (op) {\n            content = op(content, options);\n          });\n        }\n        obj[prop] = content;\n      } else if (stat.isDirectory()) {\n        obj[listing] = loadFiles(file, options);\n      }\n  });\n\n  return obj;\n}\n\n/**\n * End of patch (also see exports and end of file)\n */\n\nfunction loadAttachments (doc, root, prefix) {\n  doc.__attachments = doc.__attachments || []\n  try {\n    fs.statSync(root)\n  } catch(e) {\n    throw e\n    throw new Error(\"Cannot stat file \"+root)\n  }\n  doc.__attachments.push({root:root, prefix:prefix});\n}\n\nfunction copy (obj) {\n  var n = {}\n  for (i in obj) n[i] = obj[i];\n  return n\n}\n\n  \nfunction createApp (doc, url, cb) {\n  var app = {doc:doc}\n  \n  app.fds = {};\n  \n  app.prepare = function () {\n    var p = function (x) {\n      for (i in x) {\n        if (i[0] != '_') {\n          if (typeof x[i] == 'function') {\n            x[i] = x[i].toString()\n            x[i] = 'function '+x[i].slice(x[i].indexOf('('))\n          }\n          if (typeof x[i] == 'object') {\n            p(x[i])\n          }\n        }\n      }\n    }\n    p(app.doc);\n    app.doc.__attachments = app.doc.__attachments || []\n    app.doc.attachments_md5 = app.doc.attachments_md5 || {}\n    app.doc._attachments = app.doc._attachments || {}\n  }\n  \n  var push = function (callback) {\n    console.log('Serializing.')\n    var doc = copy(app.doc);\n    doc._attachments = copy(app.doc._attachments)\n    delete doc.__attachments;\n    var body = JSON.stringify(doc)\n    console.log('PUT '+url.replace(/^(https?:\\/\\/[^@:]+):[^@]+@/, '$1:******@'))\n    request({uri:url, method:'PUT', body:body, headers:h}, function (err, resp, body) {\n      if (err) throw err;\n      if (resp.statusCode !== 201) {\n        throw new Error(\"Could not push document\\nCode: \" + resp.statusCode + \"\\n\"+body);\n      }\n      app.doc._rev = JSON.parse(body).rev\n      console.log('Finished push. '+app.doc._rev)\n      request({uri:url, headers:h}, function (err, resp, body) {\n        body = JSON.parse(body);\n        app.doc._attachments = body._attachments;\n        if (callback) callback()\n      })\n    })\n  }\n  \n  app.push = function (callback) {\n    var revpos\n      , pending_dirs = 0\n      ;\n    \n    console.log('Preparing.')\n    var doc = app.current;\n    for (i in app.doc) {\n      if (i !== '_rev') doc[i] = app.doc[i]\n    }\n    app.doc = doc;\n    app.prepare();\n    revpos = app.doc._rev ? parseInt(app.doc._rev.slice(0,app.doc._rev.indexOf('-'))) : 0;\n    \n    var coffeeCompile;\n    var coffeeExt;\n    try{\n      coffeeCompile = require('coffee-script');\n      coffeeExt = /\\.(lit)?coffee$/;\n    } catch(e){}\n\n    app.doc.__attachments.forEach(function (att) {\n      watch.walk(att.root, {ignoreDotFiles:true}, function (err, files) {\n        pending_dirs += 1;\n        var pending_files = Object.keys(files).length;\n        for (i in files) { (function (f) {\n          fs.readFile(f, function (err, data) {\n            if(f.match(coffeeExt)){\n              data = new Buffer( coffeeCompile.compile(data.toString()) );\n              f = f.replace(coffeeExt,'.js');\n            }\n            f = f.replace(att.root, att.prefix || '').replace(/\\\\/g,\"/\");\n            if (f[0] == '/') f = f.slice(1)\n            if (!err) {\n              var d = data.toString('base64')\n                , md5 = crypto.createHash('md5')\n                , mime = mimetypes.lookup(path.extname(f).slice(1))\n                ;\n              md5.update(d)\n              md5 = md5.digest('hex')\n              if (app.doc.attachments_md5[f] && app.doc._attachments[f]) {\n                if (app.doc._attachments[f].revpos === app.doc.attachments_md5[f].revpos &&\n                    app.doc.attachments_md5[f].md5 === md5) {\n                  pending_files -= 1;\n                  if(pending_files === 0){\n                    pending_dirs -= 1;\n                    if(pending_dirs === 0){\n                      push(callback);\n                    }\n                  }\n                  return; // Does not need to be updated.\n                }\n              }\n              app.doc._attachments[f] = {data:d, content_type:mime};\n              app.doc.attachments_md5[f] = {revpos:revpos + 1, md5:md5};\n            }\n            pending_files -= 1\n            if(pending_files === 0){\n              pending_dirs -= 1;\n              if(pending_dirs === 0){\n                push(callback);\n              }\n            }\n          })\n        })(i)}\n      })\n    })\n    if (!app.doc.__attachments || app.doc.__attachments.length == 0) push(callback);\n  }  \n  \n  app.sync = function (callback) {\n    // A few notes.\n    //   File change events are stored in an array and bundled up in to one write call., \n    // this reduces the amount of unnecessary processing as we get a lof of change events.\n    //   The file descriptors are stored and re-used because it cuts down on the number of bad change events.\n    //   And finally, we check the md5 and only push when the document is actually been changed.\n    //   A lot of crazy workarounds for the fact that we basically get an event every time someone\n    // looks funny at the underlying files and even reading and opening fds to check on the file trigger\n    // more events.\n    \n    app.push(function () {\n      var changes = [];\n      console.log('Watching files for changes...')\n      app.doc.__attachments.forEach(function (att) {\n        var pre = att.root\n        var slash = (process.platform === 'win32') ? '\\\\' : '/';\n        if (pre[pre.length - 1] !== slash) pre += slash;\n        watch.createMonitor(att.root, {ignoreDotFiles:true}, function (monitor) {\n          monitor.on(\"removed\", function (f, stat) {\n            f = f.replace(pre, '');\n            changes.push([null, f]);\n          })\n          monitor.on(\"created\", function (f, stat) {\n            changes.push([f, f.replace(pre, ''), stat]);\n          })\n          monitor.on(\"changed\", function (f, curr, prev) {\n            changes.push([f, f.replace(pre, ''), curr]);\n          })\n        })\n      })\n      var check = function () {\n        var pending = 0\n          , revpos = parseInt(app.doc._rev.slice(0,app.doc._rev.indexOf('-')))\n          , dirty = false\n          ;\n        if (changes.length > 0) {\n          changes.forEach(function (change) {\n            if (!change[0]) {\n              delete app.doc._attachments[change[1]];\n              dirty = true;\n              console.log(\"Removed \"+change[1]);\n            } else {\n              pending += 1\n              \n              fs.readFile(change[0], function (err, data) {\n                var f = change[1]\n                  , d = data.toString('base64')\n                  , md5 = crypto.createHash('md5')\n                  , mime = mimetypes.lookup(path.extname(f).slice(1))\n                  ;\n\n                md5.update(d)\n                md5 = md5.digest('hex')\n                pending -= 1\n                if (!app.doc.attachments_md5[f] || (md5 !== app.doc.attachments_md5[f].md5) ) {\n                  app.doc._attachments[f] = {data:d, content_type:mime};\n                  app.doc.attachments_md5[f] = {revpos:revpos + 1, md5:md5};\n                  dirty = true;\n                  console.log(\"Changed \"+change[0]);\n                }\n                if (pending == 0 && dirty) push(function () {dirty = false; setTimeout(check, 50)})\n                else if (pending == 0 && !dirty) setTimeout(check, 50)\n                \n              })\n            }\n            \n          })\n          changes = []\n          if (pending == 0 && dirty) push(function () {dirty = false; setTimeout(check, 50)})\n          else if (pending == 0 && !dirty) setTimeout(check, 50)\n        } else {\n          setTimeout(check, 50);\n        }\n      }\n      setTimeout(check, 50)\n    })\n  }\n  var _id = doc.app ? doc.app._id : doc._id\n  \n  if (url.slice(url.length - _id.length) !== _id) url += '/' + _id;\n\n  request({uri:url, headers:h}, function (err, resp, body) {\n    if (err) throw err;\n    if (resp.statusCode == 404) app.current = {};\n    else if (resp.statusCode !== 200) throw new Error(\"Failed to get doc\\n\"+body)\n    else app.current = JSON.parse(body)\n    cb(app)\n  })\n}\n\nexports.createApp = createApp\nexports.loadAttachments = loadAttachments\nexports.bin = require('./bin')\nexports.loadFiles = loadFiles\n","/home/travis/build/npmtest/node-npmtest-couchapp/node_modules/couchapp/mimetypes.js":"// from http://github.com/felixge/node-paperboy\nexports.types = {\n  \"aiff\":\"audio/x-aiff\",\n  \"appcache\":\"text/cache-manifest\",\n  \"arj\":\"application/x-arj-compressed\",\n  \"asf\":\"video/x-ms-asf\",\n  \"asx\":\"video/x-ms-asx\",\n  \"au\":\"audio/ulaw\",\n  \"avi\":\"video/x-msvideo\",\n  \"bcpio\":\"application/x-bcpio\",\n  \"ccad\":\"application/clariscad\",\n  \"cod\":\"application/vnd.rim.cod\",\n  \"com\":\"application/x-msdos-program\",\n  \"cpio\":\"application/x-cpio\",\n  \"cpt\":\"application/mac-compactpro\",\n  \"csh\":\"application/x-csh\",\n  \"css\":\"text/css\",\n  \"deb\":\"application/x-debian-package\",\n  \"dl\":\"video/dl\",\n  \"doc\":\"application/msword\",\n  \"drw\":\"application/drafting\",\n  \"dvi\":\"application/x-dvi\",\n  \"dwg\":\"application/acad\",\n  \"dxf\":\"application/dxf\",\n  \"dxr\":\"application/x-director\",\n  \"etx\":\"text/x-setext\",\n  \"ez\":\"application/andrew-inset\",\n  \"fli\":\"video/x-fli\",\n  \"flv\":\"video/x-flv\",\n  \"gif\":\"image/gif\",\n  \"gl\":\"video/gl\",\n  \"gtar\":\"application/x-gtar\",\n  \"gz\":\"application/x-gzip\",\n  \"hdf\":\"application/x-hdf\",\n  \"hqx\":\"application/mac-binhex40\",\n  \"html\":\"text/html\",\n  \"ice\":\"x-conference/x-cooltalk\",\n  \"ico\":\"image/x-icon\",\n  \"ief\":\"image/ief\",\n  \"igs\":\"model/iges\",\n  \"ips\":\"application/x-ipscript\",\n  \"ipx\":\"application/x-ipix\",\n  \"jad\":\"text/vnd.sun.j2me.app-descriptor\",\n  \"jar\":\"application/java-archive\",\n  \"jpeg\":\"image/jpeg\",\n  \"jpg\":\"image/jpeg\",\n  \"js\":\"text/javascript\",\n  \"json\":\"application/json\",\n  \"latex\":\"application/x-latex\",\n  \"lsp\":\"application/x-lisp\",\n  \"lzh\":\"application/octet-stream\",\n  \"m\":\"text/plain\",\n  \"m3u\":\"audio/x-mpegurl\",\n  \"man\":\"application/x-troff-man\",\n  \"me\":\"application/x-troff-me\",\n  \"midi\":\"audio/midi\",\n  \"mif\":\"application/x-mif\",\n  \"mime\":\"www/mime\",\n  \"movie\":\"video/x-sgi-movie\",\n  \"mustache\":\"text/plain\",\n  \"mp4\":\"video/mp4\",\n  \"mpg\":\"video/mpeg\",\n  \"mpga\":\"audio/mpeg\",\n  \"ms\":\"application/x-troff-ms\",\n  \"nc\":\"application/x-netcdf\",\n  \"oda\":\"application/oda\",\n  \"ogm\":\"application/ogg\",\n  \"pbm\":\"image/x-portable-bitmap\",\n  \"pdf\":\"application/pdf\",\n  \"pgm\":\"image/x-portable-graymap\",\n  \"pgn\":\"application/x-chess-pgn\",\n  \"pgp\":\"application/pgp\",\n  \"pm\":\"application/x-perl\",\n  \"png\":\"image/png\",\n  \"pnm\":\"image/x-portable-anymap\",\n  \"ppm\":\"image/x-portable-pixmap\",\n  \"ppz\":\"application/vnd.ms-powerpoint\",\n  \"pre\":\"application/x-freelance\",\n  \"prt\":\"application/pro_eng\",\n  \"ps\":\"application/postscript\",\n  \"qt\":\"video/quicktime\",\n  \"ra\":\"audio/x-realaudio\",\n  \"rar\":\"application/x-rar-compressed\",\n  \"ras\":\"image/x-cmu-raster\",\n  \"rgb\":\"image/x-rgb\",\n  \"rm\":\"audio/x-pn-realaudio\",\n  \"rpm\":\"audio/x-pn-realaudio-plugin\",\n  \"rtf\":\"text/rtf\",\n  \"rtx\":\"text/richtext\",\n  \"scm\":\"application/x-lotusscreencam\",\n  \"set\":\"application/set\",\n  \"sgml\":\"text/sgml\",\n  \"sh\":\"application/x-sh\",\n  \"shar\":\"application/x-shar\",\n  \"silo\":\"model/mesh\",\n  \"sit\":\"application/x-stuffit\",\n  \"skt\":\"application/x-koan\",\n  \"smil\":\"application/smil\",\n  \"snd\":\"audio/basic\",\n  \"sol\":\"application/solids\",\n  \"spl\":\"application/x-futuresplash\",\n  \"src\":\"application/x-wais-source\",\n  \"stl\":\"application/SLA\",\n  \"stp\":\"application/STEP\",\n  \"sv4cpio\":\"application/x-sv4cpio\",\n  \"sv4crc\":\"application/x-sv4crc\",\n  \"svg\":\"image/svg+xml\",\n  \"swf\":\"application/x-shockwave-flash\",\n  \"tar\":\"application/x-tar\",\n  \"tcl\":\"application/x-tcl\",\n  \"tex\":\"application/x-tex\",\n  \"texinfo\":\"application/x-texinfo\",\n  \"tgz\":\"application/x-tar-gz\",\n  \"tiff\":\"image/tiff\",\n  \"tr\":\"application/x-troff\",\n  \"tsi\":\"audio/TSP-audio\",\n  \"tsp\":\"application/dsptype\",\n  \"tsv\":\"text/tab-separated-values\",\n  \"unv\":\"application/i-deas\",\n  \"ustar\":\"application/x-ustar\",\n  \"vcd\":\"application/x-cdlink\",\n  \"vda\":\"application/vda\",\n  \"vivo\":\"video/vnd.vivo\",\n  \"vrm\":\"x-world/x-vrml\",\n  \"wav\":\"audio/x-wav\",\n  \"wax\":\"audio/x-ms-wax\",\n  \"wma\":\"audio/x-ms-wma\",\n  \"wmv\":\"video/x-ms-wmv\",\n  \"wmx\":\"video/x-ms-wmx\",\n  \"wrl\":\"model/vrml\",\n  \"wvx\":\"video/x-ms-wvx\",\n  \"xbm\":\"image/x-xbitmap\",\n  \"xlw\":\"application/vnd.ms-excel\",\n  \"xml\":\"text/xml\",\n  \"xpm\":\"image/x-xpixmap\",\n  \"xwd\":\"image/x-xwindowdump\",\n  \"xyz\":\"chemical/x-pdb\",\n  \"zip\":\"application/zip\",\n};\n\nexports.lookup = function(ext, defaultType) {\n  defaultType = defaultType || 'application/octet-stream';\n\n  return (ext in exports.types)\n    ? exports.types[ext]\n    : defaultType;\n};\n","/home/travis/build/npmtest/node-npmtest-couchapp/node_modules/couchapp/bin.js":"#!/usr/bin/env node\n\nvar couchapp = require('./main.js')\n  , watch = require('watch')\n  , path = require('path')\n  , fs = require('fs')\n  ;\n\nfunction abspath (pathname) {\n  if (pathname[0] === '/') return pathname\n  return path.join(process.cwd(), path.normalize(pathname));\n}\n\nfunction copytree (source, dest) {\n  watch.walk(source, function (err  , files) {\n    for (i in files) {\n      (function (i) {\n        if (files[i].isDirectory()) {\n          try {\n            fs.mkdirSync(i.replace(source, dest), 0755)\n          } catch(e) {\n            console.log('Could not create '+dest)\n          }\n        } else {\n          fs.readFile(i, function (err, data) {\n            if (err) throw err;\n            fs.writeFile(i.replace(source, dest), data, function (err) {\n              if (err) throw err;\n            });\n          })\n        }\n      })(i);\n    }\n  })\n}\n\nfunction boiler (app) {\n  if (app) {\n    try { fs.mkdirSync(path.join(process.cwd(), app)) }\n    catch(e) {};\n  }\n  app = app || '.'\n\n  copytree(path.join(__dirname, 'boiler'), path.join(process.cwd(), app));\n\n\n}\n\n\nfunction onBeforePushSync() {\n  if (beforePushSyncListener && typeof beforePushSyncListener.onBeforePushSync === \"function\") {\n    beforePushSyncListener.onBeforePushSync();\n  }\n}\nfunction onAfterPushSync() {\n  if (afterPushSyncListener && typeof afterPushSyncListener.onAfterPushSync === \"function\") {\n    afterPushSyncListener.onAfterPushSync();\n  }\n}\nvar _isUsingDirectoryConfig;\nfunction isUsingDirectoryConfig() {\n  if(_isUsingDirectoryConfig != null)\n    return _isUsingDirectoryConfig;\n  return _isUsingDirectoryConfig = (process.argv[2] && (process.argv[2].trim() === \"-dc\"));\n}\n\nif (process.mainModule && process.mainModule.filename === __filename) {\n  var node\n    , bin\n    , command\n    , app\n    , couch\n    , configDirectory\n    , configFileNames\n    , apps = []\n    , beforePushSyncListener\n    , afterPushSyncListener\n    ;\n\n  //check for directory-based config, if so then read rather than shift() the arguments: will need to read them again later\n  if (isUsingDirectoryConfig()) {\n    node = process.argv[0];\n    bin = process.argv[1];\n    command = process.argv[3];\n    configDirectory = process.argv[4];\n    couch = process.argv[5];\n    configFileNames = fs.readdirSync(configDirectory);\n    if (configFileNames) {\n      configFileNames.forEach(function (value, index) {\n        //any files starting with \"app\" are included as app files e.g. app.js, app_number1.js etc.\n        if (value.indexOf(\"app\") == 0) {\n          apps.push(path.join(configDirectory, value));\n        }\n        //\"before\" listener must be called beforepushsync.js and be in the config directory\n        else if (value.toLowerCase().trim() === \"beforepushsync.js\") {\n          beforePushSyncListener = require(abspath(path.join(configDirectory, \"beforepushsync.js\")));\n        }\n        //\"after\" listener must be called afterpushsync.js and be in the config directory\n        else if (value.toLowerCase().trim() === \"afterpushsync.js\") {\n          afterPushSyncListener = require(abspath(path.join(configDirectory, \"afterpushsync.js\")));\n        }\n      });\n    }\n  }\n  else {\n    node = process.argv.shift();\n    bin = process.argv.shift();\n    command = process.argv.shift();\n    app = process.argv.shift();\n    couch = process.argv.shift();\n  }\n\n  if (command == 'help' || command == undefined) {\n    console.log(\n      [ \"couchapp -- utility for creating couchapps\"\n        , \"\"\n        , \"Usage:\"\n        , \"(backwardly compatible without switch - single app file)\"\n        , \"  couchapp <command> app.js http://localhost:5984/dbname [opts]\"\n        , \"(directory based config specified by switch - multiple app files and pre- and post-processing capability)\"\n        , \" couchapp -dc <command> <appconfigdirectory> http://localhost:5984/dbname\"\n        , \"\"\n        , \"Commands:\"\n        , \"  push   : Push app once to server.\"\n        , \"  sync   : Push app then watch local files for changes.\"\n        , \"  boiler : Create a boiler project.\"\n        , \"  serve  : Serve couchapp from development webserver\"\n        , \"            you can specify some options \"\n        , \"            -p port  : list on port portNum [default=3000]\"\n        , \"            -d dir   : attachments directory [default='attachments']\"\n        , \"            -l       : log rewrites to couchdb [default='false']\"\n      ]\n      .join('\\n')\n    )\n    process.exit();\n  }\n  \n  if (couch == undefined) {\n    try {\n      couch = JSON.parse(fs.readFileSync('.couchapp.json')).couch;\n    } catch (e) {\n      // Discard exception: absent or malformed config file\n    }\n  }\n\n  if (isUsingDirectoryConfig()) {\n    if (command == 'boiler') {\n      for (i in apps) {\n        boiler(apps[i]);\n      }\n    } else {\n      onBeforePushSync();\n      for (i in apps) {\n        //an immediately executed function is used so the loop counter variable is available\n        //in createApp's callback function: multiple calls to push/sync are supported and\n        //onAfterPushSync is supplied as the callback function on the last call\n        (function keepLoopCounter(i) {\n          couchapp.createApp(require(abspath(apps[i])), couch, function (app) {\n            if (command == 'push') {\n              app.push(i == apps.length - 1 ? onAfterPushSync : null);\n            }\n            else if (command == 'sync') {\n              app.sync(i == apps.length ? onAfterPushSync : null);\n            }\n          });\n        })(i);\n      }\n\n    }\n  }\n  else {\n    if (command == 'boiler') {\n      boiler(app);\n    } else {\n      couchapp.createApp(require(abspath(app)), couch, function (app) {\n        if (command == 'push') app.push()\n        else if (command == 'sync') app.sync()\n        else if (command == 'serve') serve(app);\n        \n      })\n    }\n  }\n\n}\n\n// Start a development web server on app\nfunction serve(app) {\n  var url = require('url');\n  var port = 3000,\n      staticDir = 'attachments',\n      tmpDir = '/tmp/couchapp-compile-' + process.pid,\n      logDbRewrites = false;\n  var arg;\n  while(arg = process.argv.shift()){\n    if(arg == '-p'){\n      port = parseInt(process.argv.shift());\n    }\n    if(arg == '-d'){\n      staticDir = process.argv.shift();\n    }\n    if(arg == '-l'){\n      logDbRewrites = true;\n    }\n  }\n  var dbUrlObj = url.parse(couch);\n\n  var proxyPaths = {}\n  var dbPrefix = '../../';\n  for (var i in app.doc.rewrites){\n    var rw = app.doc.rewrites[i];\n    // Rewrites starting with '../../' are proxied to the database\n    if (rw.to.indexOf(dbPrefix) == 0){\n      var proxyPath = rw.from;\n      if(proxyPath[proxyPath.length -1] == '*') {\n        proxyPath = proxyPath.substring(0,proxyPath.length-1)\n      }\n      var dbPath = rw.to.substring(dbPrefix.length);\n      if(dbPath[dbPath.length - 1] == '*'){\n        dbPath = dbPath.substring(0,dbPath.length-1)\n      }\n      if(dbPath.indexOf('*') >=0 ){\n        if(logDbRewrites){\n          console.log(\"Don't know how to proxy '\" + rw.from + \"' to CouchDB at \" + rw.from );\n        }\n      } else {\n        proxyPaths[proxyPath] =\n          dbUrlObj.protocol + '//' + dbUrlObj.host +\n          path.normalize(dbUrlObj.pathname + dbPath);\n          if(logDbRewrites){\n            console.log(\"Proxying rewrite '\" + proxyPath + \"' to CouchDB at \" + proxyPaths[proxyPath] );\n          }\n      }\n    }\n  }\n\n  var connect = require('connect');\n  var httpProxy = require('http-proxy'),\n      connect   = require('connect'),\n      connectCompiler;\n  try{\n      connectCompiler = require('connect-compiler');\n  } catch(e) {}\n\n\n  var proxy = new httpProxy.HttpProxy({\n    target: {\n      host: dbUrlObj.host,\n      hostname: dbUrlObj.hostname,\n      port: dbUrlObj.port,\n      https: dbUrlObj.protocol == 'https:',\n    }\n  });\n  var app = connect()\n    .use(connect.logger('dev'))\n    .use(connect.static(staticDir));\n  if(connectCompiler){\n    console.log('Will compile assets with connect-assets.');\n    var ignore = [];\n    var quote = function(str) {\n      return (str+'').replace(/([.?*+^$[\\]\\\\(){}|-])/g, \"\\\\$1\");\n    }\n    for(var prefix in proxyPaths){\n      ignore.push(quote(prefix));\n    }\n    if(ignore.length){\n      //console.log(\"Asset compile ignore paths:\", '^(' +  ignore.join('|') + ')');\n      ignore  = new RegExp('^(' +  ignore.join('|') + ')');\n    } else {\n      ignore = null;\n    }\n    app.use(connectCompiler({\n      enabled: ['coffee'] ,\n      src: staticDir,\n      dest: tmpDir,\n      ignore :  ignore,\n    }))\n    .use(connect.static(tmpDir));\n  }\n  app.use(function(req, res, next) {\n      for(var prefix in proxyPaths){\n        var dbPath = proxyPaths[prefix];\n        if (req.url.indexOf(prefix) === 0) {\n          var dbURL = req.url.replace(prefix,dbPath);\n          if(logDbRewrites){\n            console.log(\"*** \", req.url , ' -> ', dbURL);\n          }\n          req.url = dbURL;\n          req.headers['host'] = dbUrlObj.host;\n          proxy.proxyRequest(req, res);\n          return;\n        }\n      }\n      var body = '404 Not found.\\nNo static file or db route matched.';\n      res.statusCode = 404;\n      res.setHeader('Content-Length', body.length);\n      res.end(body);\n     })\n    .use(connect.errorHandler())\n    .listen(port);\n  console.log(\"Serving couchapp at: http://0.0.0.0:\" + port +\"/\");\n\n  //Cleanup the temp directory on exit\n  var cleanup = function(){\n    var rmDir = function(dirPath) {\n      try { var files = fs.readdirSync(dirPath); }\n      catch(e) { return; }\n      if (files.length > 0)\n        for (var i = 0; i < files.length; i++) {\n          var filePath = dirPath + '/' + files[i];\n          if (fs.statSync(filePath).isFile())\n            fs.unlinkSync(filePath);\n          else\n            rmDir(filePath);\n        }\n      fs.rmdirSync(dirPath);\n    };\n    rmDir(tmpDir);\n  };\n  process.on('exit',cleanup);\n  process.on('SIGINT',function(){\n    cleanup()\n    process.exit();\n  });\n}\n\nexports.boilerDirectory = path.join(__dirname, 'boiler')\n\n","/home/travis/build/npmtest/node-npmtest-couchapp/node_modules/couchapp/boiler/app.js":" var couchapp = require('couchapp')\n  , path = require('path')\n  ;\n\nddoc = \n  { _id:'_design/app'\n  , rewrites : \n    [ {from:\"/\", to:'index.html'}\n    , {from:\"/api\", to:'../../'}\n    , {from:\"/api/*\", to:'../../*'}\n    , {from:\"/*\", to:'*'}\n    ]\n  }\n  ;\n\nddoc.views = {};\n\nddoc.validate_doc_update = function (newDoc, oldDoc, userCtx) {   \n  if (newDoc._deleted === true && userCtx.roles.indexOf('_admin') === -1) {\n    throw \"Only admin can delete documents on this database.\";\n  } \n}\n\ncouchapp.loadAttachments(ddoc, path.join(__dirname, 'attachments'));\n\nmodule.exports = ddoc;"}